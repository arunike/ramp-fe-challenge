{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { Component, cloneElement, useRef, useEffect, useCallback, useLayoutEffect, useReducer, useMemo } from 'react';\nimport { isForwardRef } from 'react-is';\nimport computeScrollIntoView from 'compute-scroll-into-view';\nimport { __assign } from 'tslib';\nlet idCounter = 0;\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\n\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop;\n}\n\nfunction noop() {}\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\n\n\nfunction scrollIntoView(node, menuNode) {\n  if (!node) {\n    return;\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed'\n  });\n  actions.forEach(_ref => {\n    let {\n      el,\n      top,\n      left\n    } = _ref;\n    el.scrollTop = top;\n    el.scrollLeft = left;\n  });\n}\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @param {Window} environment The window context where downshift renders.\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\n\n\nfunction isOrContainsNode(parent, child, environment) {\n  const result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);\n  return result;\n}\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\n\n\nfunction debounce(fn, time) {\n  let timeoutId;\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  }\n\n  function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    cancel();\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      fn(...args);\n    }, time);\n  }\n\n  wrapper.cancel = cancel;\n  return wrapper;\n}\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\n\n\nfunction callAllEventHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function (event) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return fns.some(fn => {\n      if (fn) {\n        fn(event, ...args);\n      }\n\n      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;\n    });\n  };\n}\n\nfunction handleRefs() {\n  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    refs[_key4] = arguments[_key4];\n  }\n\n  return node => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  };\n}\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\n\n\nfunction generateId() {\n  return String(idCounter++);\n}\n/**\n * Resets idCounter to 0. Used for SSR.\n */\n\n\nfunction resetIdCounter() {\n  idCounter = 0;\n}\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specify if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\n\n\nfunction getA11yStatusMessage$1(_ref2) {\n  let {\n    isOpen,\n    resultCount,\n    previousResultCount\n  } = _ref2;\n\n  if (!isOpen) {\n    return '';\n  }\n\n  if (!resultCount) {\n    return 'No results are available.';\n  }\n\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${resultCount === 1 ? ' is' : 's are'} available, use up and down arrow keys to navigate. Press Enter key to select.`;\n  }\n\n  return '';\n}\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\n\n\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ?\n  /* istanbul ignore next (preact) */\n  arg[0] : arg;\n\n  if (!arg && defaultValue) {\n    return defaultValue;\n  } else {\n    return arg;\n  }\n}\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\n\n\nfunction isDOMElement(element) {\n  // then we assume this is react\n  return typeof element.type === 'string';\n}\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\n\n\nfunction getElementProps(element) {\n  return element.props;\n}\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\n\n\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`);\n}\n\nconst stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\n\nfunction pickState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n\n  const result = {};\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k];\n    }\n  });\n  return result;\n}\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\n\n\nfunction getState(state, props) {\n  return Object.keys(state).reduce((prevState, key) => {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];\n    return prevState;\n  }, {});\n}\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\n\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\n\n\nfunction normalizeArrowKey(event) {\n  const {\n    key,\n    keyCode\n  } = event;\n  /* istanbul ignore next (ie) */\n\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`;\n  }\n\n  return key;\n}\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\n\n\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\n\n\nfunction getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  if (circular === void 0) {\n    circular = true;\n  }\n\n  if (itemCount === 0) {\n    return -1;\n  }\n\n  const itemsLastIndex = itemCount - 1;\n\n  if (typeof baseIndex !== 'number' || baseIndex < 0 || baseIndex >= itemCount) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;\n  }\n\n  let newIndex = baseIndex + moveAmount;\n\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0;\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex;\n  }\n\n  const nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);\n\n  if (nonDisabledNewIndex === -1) {\n    return baseIndex >= itemCount ? -1 : baseIndex;\n  }\n\n  return nonDisabledNewIndex;\n}\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\n\n\nfunction getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  const currentElementNode = getItemNodeFromIndex(baseIndex);\n\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex;\n  }\n\n  if (moveAmount > 0) {\n    for (let index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index;\n      }\n    }\n  } else {\n    for (let index = baseIndex - 1; index >= 0; index--) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index;\n      }\n    }\n  }\n\n  if (circular) {\n    return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);\n  }\n\n  return -1;\n}\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Window} environment The window context where downshift renders.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\n\n\nfunction targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {\n  if (checkActiveElement === void 0) {\n    checkActiveElement = true;\n  }\n\n  return downshiftElements.some(contextNode => contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment)));\n} // eslint-disable-next-line import/no-mutable-exports\n\n\nlet validateControlledUnchanged = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  validateControlledUnchanged = (state, prevProps, nextProps) => {\n    const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`;\n    Object.keys(state).forEach(propKey => {\n      if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(`downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`);\n      } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {\n        // eslint-disable-next-line no-console\n        console.error(`downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`);\n      }\n    });\n  };\n}\n\nconst cleanupStatus = debounce(documentProp => {\n  getStatusDiv(documentProp).textContent = '';\n}, 500);\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\n\nfunction setStatus(status, documentProp) {\n  const div = getStatusDiv(documentProp);\n\n  if (!status) {\n    return;\n  }\n\n  div.textContent = status;\n  cleanupStatus(documentProp);\n}\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\n\n\nfunction getStatusDiv(documentProp) {\n  if (documentProp === void 0) {\n    documentProp = document;\n  }\n\n  let statusDiv = documentProp.getElementById('a11y-status-message');\n\n  if (statusDiv) {\n    return statusDiv;\n  }\n\n  statusDiv = documentProp.createElement('div');\n  statusDiv.setAttribute('id', 'a11y-status-message');\n  statusDiv.setAttribute('role', 'status');\n  statusDiv.setAttribute('aria-live', 'polite');\n  statusDiv.setAttribute('aria-relevant', 'additions text');\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px'\n  });\n  documentProp.body.appendChild(statusDiv);\n  return statusDiv;\n}\n\nconst unknown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_unknown__' : 0;\nconst mouseUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_mouseup__' : 1;\nconst itemMouseEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_item_mouseenter__' : 2;\nconst keyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_up__' : 3;\nconst keyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_down__' : 4;\nconst keyDownEscape = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_escape__' : 5;\nconst keyDownEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_enter__' : 6;\nconst keyDownHome = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_home__' : 7;\nconst keyDownEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_end__' : 8;\nconst clickItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_item__' : 9;\nconst blurInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_input__' : 10;\nconst changeInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_change_input__' : 11;\nconst keyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_space_button__' : 12;\nconst clickButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_button__' : 13;\nconst blurButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_button__' : 14;\nconst controlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_controlled_prop_updated_selected_item__' : 15;\nconst touchEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_touchend__' : 16;\nvar stateChangeTypes$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  unknown: unknown,\n  mouseUp: mouseUp,\n  itemMouseEnter: itemMouseEnter,\n  keyDownArrowUp: keyDownArrowUp,\n  keyDownArrowDown: keyDownArrowDown,\n  keyDownEscape: keyDownEscape,\n  keyDownEnter: keyDownEnter,\n  keyDownHome: keyDownHome,\n  keyDownEnd: keyDownEnd,\n  clickItem: clickItem,\n  blurInput: blurInput,\n  changeInput: changeInput,\n  keyDownSpaceButton: keyDownSpaceButton,\n  clickButton: clickButton,\n  blurButton: blurButton,\n  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,\n  touchEnd: touchEnd\n});\n/* eslint camelcase:0 */\n\nconst Downshift = /*#__PURE__*/(() => {\n  class Downshift extends Component {\n    constructor(_props) {\n      var _this;\n\n      super(_props);\n      _this = this;\n      this.id = this.props.id || `downshift-${generateId()}`;\n      this.menuId = this.props.menuId || `${this.id}-menu`;\n      this.labelId = this.props.labelId || `${this.id}-label`;\n      this.inputId = this.props.inputId || `${this.id}-input`;\n\n      this.getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`);\n\n      this.input = null;\n      this.items = [];\n      this.itemCount = null;\n      this.previousResultCount = 0;\n      this.timeoutIds = [];\n\n      this.internalSetTimeout = (fn, time) => {\n        const id = setTimeout(() => {\n          this.timeoutIds = this.timeoutIds.filter(i => i !== id);\n          fn();\n        }, time);\n        this.timeoutIds.push(id);\n      };\n\n      this.setItemCount = count => {\n        this.itemCount = count;\n      };\n\n      this.unsetItemCount = () => {\n        this.itemCount = null;\n      };\n\n      this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {\n        if (highlightedIndex === void 0) {\n          highlightedIndex = _this.props.defaultHighlightedIndex;\n        }\n\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n\n        otherStateToSet = pickState(otherStateToSet);\n\n        _this.internalSetState({\n          highlightedIndex,\n          ...otherStateToSet\n        });\n      };\n\n      this.clearSelection = cb => {\n        this.internalSetState({\n          selectedItem: null,\n          inputValue: '',\n          highlightedIndex: this.props.defaultHighlightedIndex,\n          isOpen: this.props.defaultIsOpen\n        }, cb);\n      };\n\n      this.selectItem = (item, otherStateToSet, cb) => {\n        otherStateToSet = pickState(otherStateToSet);\n        this.internalSetState({\n          isOpen: this.props.defaultIsOpen,\n          highlightedIndex: this.props.defaultHighlightedIndex,\n          selectedItem: item,\n          inputValue: this.props.itemToString(item),\n          ...otherStateToSet\n        }, cb);\n      };\n\n      this.selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n        const item = this.items[itemIndex];\n\n        if (item == null) {\n          return;\n        }\n\n        this.selectItem(item, otherStateToSet, cb);\n      };\n\n      this.selectHighlightedItem = (otherStateToSet, cb) => {\n        return this.selectItemAtIndex(this.getState().highlightedIndex, otherStateToSet, cb);\n      };\n\n      this.internalSetState = (stateToSet, cb) => {\n        let isItemSelected, onChangeArg;\n        const onStateChangeArg = {};\n        const isStateToSetFunction = typeof stateToSet === 'function'; // we want to call `onInputValueChange` before the `setState` call\n        // so someone controlling the `inputValue` state gets notified of\n        // the input change as soon as possible. This avoids issues with\n        // preserving the cursor position.\n        // See https://github.com/downshift-js/downshift/issues/217 for more info.\n\n        if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n          this.props.onInputValueChange(stateToSet.inputValue, { ...this.getStateAndHelpers(),\n            ...stateToSet\n          });\n        }\n\n        return this.setState(state => {\n          state = this.getState(state);\n          let newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet; // Your own function that could modify the state that will be set.\n\n          newStateToSet = this.props.stateReducer(state, newStateToSet); // checks if an item is selected, regardless of if it's different from\n          // what was selected before\n          // used to determine if onSelect and onChange callbacks should be called\n\n          isItemSelected = newStateToSet.hasOwnProperty('selectedItem'); // this keeps track of the object we want to call with setState\n\n          const nextState = {}; // we need to call on change if the outside world is controlling any of our state\n          // and we're trying to update that state. OR if the selection has changed and we're\n          // trying to update the selection\n\n          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {\n            onChangeArg = newStateToSet.selectedItem;\n          }\n\n          newStateToSet.type = newStateToSet.type || unknown;\n          Object.keys(newStateToSet).forEach(key => {\n            // onStateChangeArg should only have the state that is\n            // actually changing\n            if (state[key] !== newStateToSet[key]) {\n              onStateChangeArg[key] = newStateToSet[key];\n            } // the type is useful for the onStateChangeArg\n            // but we don't actually want to set it in internal state.\n            // this is an undocumented feature for now... Not all internalSetState\n            // calls support it and I'm not certain we want them to yet.\n            // But it enables users controlling the isOpen state to know when\n            // the isOpen state changes due to mouseup events which is quite handy.\n\n\n            if (key === 'type') {\n              return;\n            }\n\n            newStateToSet[key]; // if it's coming from props, then we don't care to set it internally\n\n            if (!isControlledProp(this.props, key)) {\n              nextState[key] = newStateToSet[key];\n            }\n          }); // if stateToSet is a function, then we weren't able to call onInputValueChange\n          // earlier, so we'll call it now that we know what the inputValue state will be.\n\n          if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {\n            this.props.onInputValueChange(newStateToSet.inputValue, { ...this.getStateAndHelpers(),\n              ...newStateToSet\n            });\n          }\n\n          return nextState;\n        }, () => {\n          // call the provided callback if it's a function\n          cbToCb(cb)(); // only call the onStateChange and onChange callbacks if\n          // we have relevant information to pass them.\n\n          const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;\n\n          if (hasMoreStateThanType) {\n            this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers());\n          }\n\n          if (isItemSelected) {\n            this.props.onSelect(stateToSet.selectedItem, this.getStateAndHelpers());\n          }\n\n          if (onChangeArg !== undefined) {\n            this.props.onChange(onChangeArg, this.getStateAndHelpers());\n          } // this is currently undocumented and therefore subject to change\n          // We'll try to not break it, but just be warned.\n\n\n          this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers());\n        });\n      };\n\n      this.rootRef = node => this._rootNode = node;\n\n      this.getRootProps = function (_temp, _temp2) {\n        let {\n          refKey = 'ref',\n          ref,\n          ...rest\n        } = _temp === void 0 ? {} : _temp;\n        let {\n          suppressRefError = false\n        } = _temp2 === void 0 ? {} : _temp2; // this is used in the render to know whether the user has called getRootProps.\n        // It uses that to know whether to apply the props automatically\n\n        _this.getRootProps.called = true;\n        _this.getRootProps.refKey = refKey;\n        _this.getRootProps.suppressRefError = suppressRefError;\n\n        const {\n          isOpen\n        } = _this.getState();\n\n        return {\n          [refKey]: handleRefs(ref, _this.rootRef),\n          role: 'combobox',\n          'aria-expanded': isOpen,\n          'aria-haspopup': 'listbox',\n          'aria-owns': isOpen ? _this.menuId : null,\n          'aria-labelledby': _this.labelId,\n          ...rest\n        };\n      };\n\n      this.keyDownHandlers = {\n        ArrowDown(event) {\n          event.preventDefault();\n\n          if (this.getState().isOpen) {\n            const amount = event.shiftKey ? 5 : 1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowDown\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowDown\n            }, () => {\n              const itemCount = this.getItemCount();\n\n              if (itemCount > 0) {\n                const {\n                  highlightedIndex\n                } = this.getState();\n                const nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, index => this.getItemNodeFromIndex(index));\n                this.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowDown\n                });\n              }\n            });\n          }\n        },\n\n        ArrowUp(event) {\n          event.preventDefault();\n\n          if (this.getState().isOpen) {\n            const amount = event.shiftKey ? -5 : -1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowUp\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowUp\n            }, () => {\n              const itemCount = this.getItemCount();\n\n              if (itemCount > 0) {\n                const {\n                  highlightedIndex\n                } = this.getState();\n                const nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, index => this.getItemNodeFromIndex(index));\n                this.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowUp\n                });\n              }\n            });\n          }\n        },\n\n        Enter(event) {\n          if (event.which === 229) {\n            return;\n          }\n\n          const {\n            isOpen,\n            highlightedIndex\n          } = this.getState();\n\n          if (isOpen && highlightedIndex != null) {\n            event.preventDefault();\n            const item = this.items[highlightedIndex];\n            const itemNode = this.getItemNodeFromIndex(highlightedIndex);\n\n            if (item == null || itemNode && itemNode.hasAttribute('disabled')) {\n              return;\n            }\n\n            this.selectHighlightedItem({\n              type: keyDownEnter\n            });\n          }\n        },\n\n        Escape(event) {\n          event.preventDefault();\n          this.reset({\n            type: keyDownEscape,\n            ...(!this.state.isOpen && {\n              selectedItem: null,\n              inputValue: ''\n            })\n          });\n        }\n\n      };\n      this.buttonKeyDownHandlers = { ...this.keyDownHandlers,\n\n        ' '(event) {\n          event.preventDefault();\n          this.toggleMenu({\n            type: keyDownSpaceButton\n          });\n        }\n\n      };\n      this.inputKeyDownHandlers = { ...this.keyDownHandlers,\n\n        Home(event) {\n          const {\n            isOpen\n          } = this.getState();\n\n          if (!isOpen) {\n            return;\n          }\n\n          event.preventDefault();\n          const itemCount = this.getItemCount();\n\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          } // get next non-disabled starting downwards from 0 if that's disabled.\n\n\n          const newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, index => this.getItemNodeFromIndex(index), false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownHome\n          });\n        },\n\n        End(event) {\n          const {\n            isOpen\n          } = this.getState();\n\n          if (!isOpen) {\n            return;\n          }\n\n          event.preventDefault();\n          const itemCount = this.getItemCount();\n\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          } // get next non-disabled starting upwards from last index if that's disabled.\n\n\n          const newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, index => this.getItemNodeFromIndex(index), false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownEnd\n          });\n        }\n\n      };\n\n      this.getToggleButtonProps = function (_temp3) {\n        let {\n          onClick,\n          onPress,\n          onKeyDown,\n          onKeyUp,\n          onBlur,\n          ...rest\n        } = _temp3 === void 0 ? {} : _temp3;\n\n        const {\n          isOpen\n        } = _this.getState();\n\n        const enabledEventHandlers = {\n          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)\n        };\n        const eventHandlers = rest.disabled ? {} : enabledEventHandlers;\n        return {\n          type: 'button',\n          role: 'button',\n          'aria-label': isOpen ? 'close menu' : 'open menu',\n          'aria-haspopup': true,\n          'data-toggle': true,\n          ...eventHandlers,\n          ...rest\n        };\n      };\n\n      this.buttonHandleKeyUp = event => {\n        // Prevent click event from emitting in Firefox\n        event.preventDefault();\n      };\n\n      this.buttonHandleKeyDown = event => {\n        const key = normalizeArrowKey(event);\n\n        if (this.buttonKeyDownHandlers[key]) {\n          this.buttonKeyDownHandlers[key].call(this, event);\n        }\n      };\n\n      this.buttonHandleClick = event => {\n        event.preventDefault(); // handle odd case for Safari and Firefox which\n        // don't give the button the focus properly.\n\n        /* istanbul ignore if (can't reasonably test this) */\n\n        if (this.props.environment.document.activeElement === this.props.environment.document.body) {\n          event.target.focus();\n        } // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n        // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n        // when building for production and should therefore have no impact on production code.\n\n\n        if (process.env.NODE_ENV === 'test') {\n          this.toggleMenu({\n            type: clickButton\n          });\n        } else {\n          // Ensure that toggle of menu occurs after the potential blur event in iOS\n          this.internalSetTimeout(() => this.toggleMenu({\n            type: clickButton\n          }));\n        }\n      };\n\n      this.buttonHandleBlur = event => {\n        const blurTarget = event.target; // Save blur target for comparison with activeElement later\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n\n        this.internalSetTimeout(() => {\n          if (!this.isMouseDown && (this.props.environment.document.activeElement == null || this.props.environment.document.activeElement.id !== this.inputId) && this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n          ) {\n            this.reset({\n              type: blurButton\n            });\n          }\n        });\n      };\n\n      this.getLabelProps = props => {\n        return {\n          htmlFor: this.inputId,\n          id: this.labelId,\n          ...props\n        };\n      };\n\n      this.getInputProps = function (_temp4) {\n        let {\n          onKeyDown,\n          onBlur,\n          onChange,\n          onInput,\n          onChangeText,\n          ...rest\n        } = _temp4 === void 0 ? {} : _temp4;\n        let onChangeKey;\n        let eventHandlers = {};\n        /* istanbul ignore next (preact) */\n\n        {\n          onChangeKey = 'onChange';\n        }\n\n        const {\n          inputValue,\n          isOpen,\n          highlightedIndex\n        } = _this.getState();\n\n        if (!rest.disabled) {\n          eventHandlers = {\n            [onChangeKey]: callAllEventHandlers(onChange, onInput, _this.inputHandleChange),\n            onKeyDown: callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown),\n            onBlur: callAllEventHandlers(onBlur, _this.inputHandleBlur)\n          };\n        }\n\n        return {\n          'aria-autocomplete': 'list',\n          'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,\n          'aria-controls': isOpen ? _this.menuId : null,\n          'aria-labelledby': _this.labelId,\n          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n          // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n          autoComplete: 'off',\n          value: inputValue,\n          id: _this.inputId,\n          ...eventHandlers,\n          ...rest\n        };\n      };\n\n      this.inputHandleKeyDown = event => {\n        const key = normalizeArrowKey(event);\n\n        if (key && this.inputKeyDownHandlers[key]) {\n          this.inputKeyDownHandlers[key].call(this, event);\n        }\n      };\n\n      this.inputHandleChange = event => {\n        this.internalSetState({\n          type: changeInput,\n          isOpen: true,\n          inputValue: event.target.value,\n          highlightedIndex: this.props.defaultHighlightedIndex\n        });\n      };\n\n      this.inputHandleBlur = () => {\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n        this.internalSetTimeout(() => {\n          const downshiftButtonIsActive = this.props.environment.document && !!this.props.environment.document.activeElement && !!this.props.environment.document.activeElement.dataset && this.props.environment.document.activeElement.dataset.toggle && this._rootNode && this._rootNode.contains(this.props.environment.document.activeElement);\n\n          if (!this.isMouseDown && !downshiftButtonIsActive) {\n            this.reset({\n              type: blurInput\n            });\n          }\n        });\n      };\n\n      this.menuRef = node => {\n        this._menuNode = node;\n      };\n\n      this.getMenuProps = function (_temp5, _temp6) {\n        let {\n          refKey = 'ref',\n          ref,\n          ...props\n        } = _temp5 === void 0 ? {} : _temp5;\n        let {\n          suppressRefError = false\n        } = _temp6 === void 0 ? {} : _temp6;\n        _this.getMenuProps.called = true;\n        _this.getMenuProps.refKey = refKey;\n        _this.getMenuProps.suppressRefError = suppressRefError;\n        return {\n          [refKey]: handleRefs(ref, _this.menuRef),\n          role: 'listbox',\n          'aria-labelledby': props && props['aria-label'] ? null : _this.labelId,\n          id: _this.menuId,\n          ...props\n        };\n      };\n\n      this.getItemProps = function (_temp7) {\n        let {\n          onMouseMove,\n          onMouseDown,\n          onClick,\n          onPress,\n          index,\n          item = process.env.NODE_ENV === 'production' ?\n          /* istanbul ignore next */\n          undefined : requiredProp('getItemProps', 'item'),\n          ...rest\n        } = _temp7 === void 0 ? {} : _temp7;\n\n        if (index === undefined) {\n          _this.items.push(item);\n\n          index = _this.items.indexOf(item);\n        } else {\n          _this.items[index] = item;\n        }\n\n        const onSelectKey = 'onClick';\n        const customClickHandler = onClick;\n        const enabledEventHandlers = {\n          // onMouseMove is used over onMouseEnter here. onMouseMove\n          // is only triggered on actual mouse movement while onMouseEnter\n          // can fire on DOM changes, interrupting keyboard navigation\n          onMouseMove: callAllEventHandlers(onMouseMove, () => {\n            if (index === _this.getState().highlightedIndex) {\n              return;\n            }\n\n            _this.setHighlightedIndex(index, {\n              type: itemMouseEnter\n            }); // We never want to manually scroll when changing state based\n            // on `onMouseMove` because we will be moving the element out\n            // from under the user which is currently scrolling/moving the\n            // cursor\n\n\n            _this.avoidScrolling = true;\n\n            _this.internalSetTimeout(() => _this.avoidScrolling = false, 250);\n          }),\n          onMouseDown: callAllEventHandlers(onMouseDown, event => {\n            // This prevents the activeElement from being changed\n            // to the item so it can remain with the current activeElement\n            // which is a more common use case.\n            event.preventDefault();\n          }),\n          [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n            _this.selectItemAtIndex(index, {\n              type: clickItem\n            });\n          })\n        }; // Passing down the onMouseDown handler to prevent redirect\n        // of the activeElement if clicking on disabled items\n\n        const eventHandlers = rest.disabled ? {\n          onMouseDown: enabledEventHandlers.onMouseDown\n        } : enabledEventHandlers;\n        return {\n          id: _this.getItemId(index),\n          role: 'option',\n          'aria-selected': _this.getState().highlightedIndex === index,\n          ...eventHandlers,\n          ...rest\n        };\n      };\n\n      this.clearItems = () => {\n        this.items = [];\n      };\n\n      this.reset = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n\n        otherStateToSet = pickState(otherStateToSet);\n\n        _this.internalSetState(_ref => {\n          let {\n            selectedItem\n          } = _ref;\n          return {\n            isOpen: _this.props.defaultIsOpen,\n            highlightedIndex: _this.props.defaultHighlightedIndex,\n            inputValue: _this.props.itemToString(selectedItem),\n            ...otherStateToSet\n          };\n        }, cb);\n      };\n\n      this.toggleMenu = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n\n        otherStateToSet = pickState(otherStateToSet);\n\n        _this.internalSetState(_ref2 => {\n          let {\n            isOpen\n          } = _ref2;\n          return {\n            isOpen: !isOpen,\n            ...(isOpen && {\n              highlightedIndex: _this.props.defaultHighlightedIndex\n            }),\n            ...otherStateToSet\n          };\n        }, () => {\n          const {\n            isOpen,\n            highlightedIndex\n          } = _this.getState();\n\n          if (isOpen) {\n            if (_this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);\n            }\n          }\n\n          cbToCb(cb)();\n        });\n      };\n\n      this.openMenu = cb => {\n        this.internalSetState({\n          isOpen: true\n        }, cb);\n      };\n\n      this.closeMenu = cb => {\n        this.internalSetState({\n          isOpen: false\n        }, cb);\n      };\n\n      this.updateStatus = debounce(() => {\n        const state = this.getState();\n        const item = this.items[state.highlightedIndex];\n        const resultCount = this.getItemCount();\n        const status = this.props.getA11yStatusMessage({\n          itemToString: this.props.itemToString,\n          previousResultCount: this.previousResultCount,\n          resultCount,\n          highlightedItem: item,\n          ...state\n        });\n        this.previousResultCount = resultCount;\n        setStatus(status, this.props.environment.document);\n      }, 200); // fancy destructuring + defaults + aliases\n      // this basically says each value of state should either be set to\n      // the initial value or the default value if the initial value is not provided\n\n      const {\n        defaultHighlightedIndex,\n        initialHighlightedIndex: _highlightedIndex = defaultHighlightedIndex,\n        defaultIsOpen,\n        initialIsOpen: _isOpen = defaultIsOpen,\n        initialInputValue: _inputValue = '',\n        initialSelectedItem: _selectedItem = null\n      } = this.props;\n\n      const _state = this.getState({\n        highlightedIndex: _highlightedIndex,\n        isOpen: _isOpen,\n        inputValue: _inputValue,\n        selectedItem: _selectedItem\n      });\n\n      if (_state.selectedItem != null && this.props.initialInputValue === undefined) {\n        _state.inputValue = this.props.itemToString(_state.selectedItem);\n      }\n\n      this.state = _state;\n    }\n    /**\n     * Clear all running timeouts\n     */\n\n\n    internalClearTimeouts() {\n      this.timeoutIds.forEach(id => {\n        clearTimeout(id);\n      });\n      this.timeoutIds = [];\n    }\n    /**\n     * Gets the state based on internal state or props\n     * If a state value is passed via props, then that\n     * is the value given, otherwise it's retrieved from\n     * stateToMerge\n     *\n     * @param {Object} stateToMerge defaults to this.state\n     * @return {Object} the state\n     */\n\n\n    getState(stateToMerge) {\n      if (stateToMerge === void 0) {\n        stateToMerge = this.state;\n      }\n\n      return getState(stateToMerge, this.props);\n    }\n\n    getItemCount() {\n      // things read better this way. They're in priority order:\n      // 1. `this.itemCount`\n      // 2. `this.props.itemCount`\n      // 3. `this.items.length`\n      let itemCount = this.items.length;\n\n      if (this.itemCount != null) {\n        itemCount = this.itemCount;\n      } else if (this.props.itemCount !== undefined) {\n        itemCount = this.props.itemCount;\n      }\n\n      return itemCount;\n    }\n\n    getItemNodeFromIndex(index) {\n      return this.props.environment.document.getElementById(this.getItemId(index));\n    }\n\n    scrollHighlightedItemIntoView() {\n      /* istanbul ignore else (react-native) */\n      {\n        const node = this.getItemNodeFromIndex(this.getState().highlightedIndex);\n        this.props.scrollIntoView(node, this._menuNode);\n      }\n    }\n\n    moveHighlightedIndex(amount, otherStateToSet) {\n      const itemCount = this.getItemCount();\n      const {\n        highlightedIndex\n      } = this.getState();\n\n      if (itemCount > 0) {\n        const nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, index => this.getItemNodeFromIndex(index));\n        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);\n      }\n    }\n\n    getStateAndHelpers() {\n      const {\n        highlightedIndex,\n        inputValue,\n        selectedItem,\n        isOpen\n      } = this.getState();\n      const {\n        itemToString\n      } = this.props;\n      const {\n        id\n      } = this;\n      const {\n        getRootProps,\n        getToggleButtonProps,\n        getLabelProps,\n        getMenuProps,\n        getInputProps,\n        getItemProps,\n        openMenu,\n        closeMenu,\n        toggleMenu,\n        selectItem,\n        selectItemAtIndex,\n        selectHighlightedItem,\n        setHighlightedIndex,\n        clearSelection,\n        clearItems,\n        reset,\n        setItemCount,\n        unsetItemCount,\n        internalSetState: setState\n      } = this;\n      return {\n        // prop getters\n        getRootProps,\n        getToggleButtonProps,\n        getLabelProps,\n        getMenuProps,\n        getInputProps,\n        getItemProps,\n        // actions\n        reset,\n        openMenu,\n        closeMenu,\n        toggleMenu,\n        selectItem,\n        selectItemAtIndex,\n        selectHighlightedItem,\n        setHighlightedIndex,\n        clearSelection,\n        clearItems,\n        setItemCount,\n        unsetItemCount,\n        setState,\n        // props\n        itemToString,\n        // derived\n        id,\n        // state\n        highlightedIndex,\n        inputValue,\n        isOpen,\n        selectedItem\n      };\n    } //////////////////////////// ROOT\n\n\n    componentDidMount() {\n      /* istanbul ignore if (react-native) */\n      if (process.env.NODE_ENV !== 'production' && !false && this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n      }\n      /* istanbul ignore if (react-native) */\n\n\n      {\n        // this.isMouseDown helps us track whether the mouse is currently held down.\n        // This is useful when the user clicks on an item in the list, but holds the mouse\n        // down long enough for the list to disappear (because the blur event fires on the input)\n        // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n        // trigger hiding the menu.\n        const onMouseDown = () => {\n          this.isMouseDown = true;\n        };\n\n        const onMouseUp = event => {\n          this.isMouseDown = false; // if the target element or the activeElement is within a downshift node\n          // then we don't want to reset downshift\n\n          const contextWithinDownshift = targetWithinDownshift(event.target, [this._rootNode, this._menuNode], this.props.environment);\n\n          if (!contextWithinDownshift && this.getState().isOpen) {\n            this.reset({\n              type: mouseUp\n            }, () => this.props.onOuterClick(this.getStateAndHelpers()));\n          }\n        }; // Touching an element in iOS gives focus and hover states, but touching out of\n        // the element will remove hover, and persist the focus state, resulting in the\n        // blur event not being triggered.\n        // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n        // If the user taps outside of Downshift, the component should be reset,\n        // but not if the user is swiping\n\n\n        const onTouchStart = () => {\n          this.isTouchMove = false;\n        };\n\n        const onTouchMove = () => {\n          this.isTouchMove = true;\n        };\n\n        const onTouchEnd = event => {\n          const contextWithinDownshift = targetWithinDownshift(event.target, [this._rootNode, this._menuNode], this.props.environment, false);\n\n          if (!this.isTouchMove && !contextWithinDownshift && this.getState().isOpen) {\n            this.reset({\n              type: touchEnd\n            }, () => this.props.onOuterClick(this.getStateAndHelpers()));\n          }\n        };\n\n        const {\n          environment\n        } = this.props;\n        environment.addEventListener('mousedown', onMouseDown);\n        environment.addEventListener('mouseup', onMouseUp);\n        environment.addEventListener('touchstart', onTouchStart);\n        environment.addEventListener('touchmove', onTouchMove);\n        environment.addEventListener('touchend', onTouchEnd);\n\n        this.cleanup = () => {\n          this.internalClearTimeouts();\n          this.updateStatus.cancel();\n          environment.removeEventListener('mousedown', onMouseDown);\n          environment.removeEventListener('mouseup', onMouseUp);\n          environment.removeEventListener('touchstart', onTouchStart);\n          environment.removeEventListener('touchmove', onTouchMove);\n          environment.removeEventListener('touchend', onTouchEnd);\n        };\n      }\n    }\n\n    shouldScroll(prevState, prevProps) {\n      const {\n        highlightedIndex: currentHighlightedIndex\n      } = this.props.highlightedIndex === undefined ? this.getState() : this.props;\n      const {\n        highlightedIndex: prevHighlightedIndex\n      } = prevProps.highlightedIndex === undefined ? prevState : prevProps;\n      const scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;\n      const scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;\n      return scrollWhenOpen || scrollWhenNavigating;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateControlledUnchanged(this.state, prevProps, this.props);\n        /* istanbul ignore if (react-native) */\n\n        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n        }\n      }\n\n      if (isControlledProp(this.props, 'selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {\n        this.internalSetState({\n          type: controlledPropUpdatedSelectedItem,\n          inputValue: this.props.itemToString(this.props.selectedItem)\n        });\n      }\n\n      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n        this.scrollHighlightedItemIntoView();\n      }\n      /* istanbul ignore else (react-native) */\n\n\n      {\n        this.updateStatus();\n      }\n    }\n\n    componentWillUnmount() {\n      this.cleanup(); // avoids memory leak\n    }\n\n    render() {\n      const children = unwrapArray(this.props.children, noop); // because the items are rerendered every time we call the children\n      // we clear this out each render and it will be populated again as\n      // getItemProps is called.\n\n      this.clearItems(); // we reset this so we know whether the user calls getRootProps during\n      // this render. If they do then we don't need to do anything,\n      // if they don't then we need to clone the element they return and\n      // apply the props for them.\n\n      this.getRootProps.called = false;\n      this.getRootProps.refKey = undefined;\n      this.getRootProps.suppressRefError = undefined; // we do something similar for getMenuProps\n\n      this.getMenuProps.called = false;\n      this.getMenuProps.refKey = undefined;\n      this.getMenuProps.suppressRefError = undefined; // we do something similar for getLabelProps\n\n      this.getLabelProps.called = false; // and something similar for getInputProps\n\n      this.getInputProps.called = false;\n      const element = unwrapArray(children(this.getStateAndHelpers()));\n\n      if (!element) {\n        return null;\n      }\n\n      if (this.getRootProps.called || this.props.suppressRefError) {\n        if (process.env.NODE_ENV !== 'production' && !this.getRootProps.suppressRefError && !this.props.suppressRefError) {\n          validateGetRootPropsCalledCorrectly(element, this.getRootProps);\n        }\n\n        return element;\n      } else if (isDOMElement(element)) {\n        // they didn't apply the root props, but we can clone\n        // this and apply the props ourselves\n        return /*#__PURE__*/cloneElement(element, this.getRootProps(getElementProps(element)));\n      }\n      /* istanbul ignore else */\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        // they didn't apply the root props, but they need to\n        // otherwise we can't query around the autocomplete\n        throw new Error('downshift: If you return a non-DOM element, you must apply the getRootProps function');\n      }\n      /* istanbul ignore next */\n\n\n      return undefined;\n    }\n\n  }\n\n  Downshift.defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage: getA11yStatusMessage$1,\n    itemToString: i => {\n      if (i == null) {\n        return '';\n      }\n\n      if (process.env.NODE_ENV !== 'production' && isPlainObject(i) && !i.hasOwnProperty('toString')) {\n        // eslint-disable-next-line no-console\n        console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);\n      }\n\n      return String(i);\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n    /* istanbul ignore next (ssr) */\n    typeof window === 'undefined' ? {} : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView\n  };\n  Downshift.stateChangeTypes = stateChangeTypes$3;\n  return Downshift;\n})();\n\nprocess.env.NODE_ENV !== \"production\" ? Downshift.propTypes = {\n  children: PropTypes.func,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultIsOpen: PropTypes.bool,\n  initialHighlightedIndex: PropTypes.number,\n  initialSelectedItem: PropTypes.any,\n  initialInputValue: PropTypes.string,\n  initialIsOpen: PropTypes.bool,\n  getA11yStatusMessage: PropTypes.func,\n  itemToString: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  onUserAction: PropTypes.func,\n  onOuterClick: PropTypes.func,\n  selectedItemChanged: PropTypes.func,\n  stateReducer: PropTypes.func,\n  itemCount: PropTypes.number,\n  id: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  }),\n  suppressRefError: PropTypes.bool,\n  scrollIntoView: PropTypes.func,\n  // things we keep in state for uncontrolled components\n  // but can accept as props for controlled components\n\n  /* eslint-disable react/no-unused-prop-types */\n  selectedItem: PropTypes.any,\n  isOpen: PropTypes.bool,\n  inputValue: PropTypes.string,\n  highlightedIndex: PropTypes.number,\n  labelId: PropTypes.string,\n  inputId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func\n  /* eslint-enable react/no-unused-prop-types */\n\n} : void 0;\nvar Downshift$1 = Downshift;\n\nfunction validateGetMenuPropsCalledCorrectly(node, _ref3) {\n  let {\n    refKey\n  } = _ref3;\n\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(`downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`);\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, _ref4) {\n  let {\n    refKey\n  } = _ref4;\n  const refKeySpecified = refKey !== 'ref';\n  const isComposite = !isDOMElement(element);\n\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(`downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`);\n  }\n\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(`downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`);\n  }\n}\n\nconst dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: ''\n};\n\nfunction callOnChangeProps(action, state, newState) {\n  const {\n    props,\n    type\n  } = action;\n  const changes = {};\n  Object.keys(state).forEach(key => {\n    invokeOnChangeHandler(key, action, state, newState);\n\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key];\n    }\n  });\n\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange({\n      type,\n      ...changes\n    });\n  }\n}\n\nfunction invokeOnChangeHandler(key, action, state, newState) {\n  const {\n    props,\n    type\n  } = action;\n  const handler = `on${capitalizeString(key)}Change`;\n\n  if (props[handler] && newState[key] !== undefined && newState[key] !== state[key]) {\n    props[handler]({\n      type,\n      ...newState\n    });\n  }\n}\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\n\n\nfunction stateReducer(s, a) {\n  return a.changes;\n}\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\n\n\nfunction getA11ySelectionMessage(selectionParameters) {\n  const {\n    selectedItem,\n    itemToString: itemToStringLocal\n  } = selectionParameters;\n  return selectedItem ? `${itemToStringLocal(selectedItem)} has been selected.` : '';\n}\n/**\n * Debounced call for updating the a11y message.\n */\n\n\nconst updateA11yStatus = debounce((getA11yMessage, document) => {\n  setStatus(getA11yMessage(), document);\n}, 200); // istanbul ignore next\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;\n\nfunction useElementIds(_ref) {\n  let {\n    id = `downshift-${generateId()}`,\n    labelId,\n    menuId,\n    getItemId,\n    toggleButtonId,\n    inputId\n  } = _ref;\n  const elementIdsRef = useRef({\n    labelId: labelId || `${id}-label`,\n    menuId: menuId || `${id}-menu`,\n    getItemId: getItemId || (index => `${id}-item-${index}`),\n    toggleButtonId: toggleButtonId || `${id}-toggle-button`,\n    inputId: inputId || `${id}-input`\n  });\n  return elementIdsRef.current;\n}\n\nfunction getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index;\n  }\n\n  if (items.length === 0) {\n    return -1;\n  }\n\n  return items.indexOf(item);\n}\n\nfunction itemToString(item) {\n  return item ? String(item) : '';\n}\n\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key);\n}\n\nfunction capitalizeString(string) {\n  return `${string.slice(0, 1).toUpperCase()}${string.slice(1)}`;\n}\n\nfunction useLatestRef(val) {\n  const ref = useRef(val); // technically this is not \"concurrent mode safe\" because we're manipulating\n  // the value during render (so it's not idempotent). However, the places this\n  // hook is used is to support memoizing callbacks which will be called\n  // *during* render, so we need the latest values *during* render.\n  // If not for this, then we'd probably want to use useLayoutEffect instead.\n\n  ref.current = val;\n  return ref;\n}\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\n\n\nfunction useEnhancedReducer(reducer, initialState, props) {\n  const prevStateRef = useRef();\n  const actionRef = useRef();\n  const enhancedReducer = useCallback((state, action) => {\n    actionRef.current = action;\n    state = getState(state, action.props);\n    const changes = reducer(state, action);\n    const newState = action.props.stateReducer(state, { ...action,\n      changes\n    });\n    return newState;\n  }, [reducer]);\n  const [state, dispatch] = useReducer(enhancedReducer, initialState);\n  const propsRef = useLatestRef(props);\n  const dispatchWithProps = useCallback(action => dispatch({\n    props: propsRef.current,\n    ...action\n  }), [propsRef]);\n  const action = actionRef.current;\n  useEffect(() => {\n    if (action && prevStateRef.current && prevStateRef.current !== state) {\n      callOnChangeProps(action, getState(prevStateRef.current, action.props), state);\n    }\n\n    prevStateRef.current = state;\n  }, [state, props, action]);\n  return [state, dispatchWithProps];\n}\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\n\n\nfunction useControlledReducer$1(reducer, initialState, props) {\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props);\n  return [getState(state, props), dispatch];\n}\n\nconst defaultProps$3 = {\n  itemToString,\n  stateReducer,\n  getA11ySelectionMessage,\n  scrollIntoView,\n  environment:\n  /* istanbul ignore next (ssr) */\n  typeof window === 'undefined' ? {} : window\n};\n\nfunction getDefaultValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n\n  const defaultValue = props[`default${capitalizeString(propKey)}`];\n\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n\n  return defaultStateValues[propKey];\n}\n\nfunction getInitialValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n\n  const value = props[propKey];\n\n  if (value !== undefined) {\n    return value;\n  }\n\n  const initialValue = props[`initial${capitalizeString(propKey)}`];\n\n  if (initialValue !== undefined) {\n    return initialValue;\n  }\n\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n\nfunction getInitialState$2(props) {\n  const selectedItem = getInitialValue$1(props, 'selectedItem');\n  const isOpen = getInitialValue$1(props, 'isOpen');\n  const highlightedIndex = getInitialValue$1(props, 'highlightedIndex');\n  const inputValue = getInitialValue$1(props, 'inputValue');\n  return {\n    highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue\n  };\n}\n\nfunction getHighlightedIndexOnOpen(props, state, offset) {\n  const {\n    items,\n    initialHighlightedIndex,\n    defaultHighlightedIndex\n  } = props;\n  const {\n    selectedItem,\n    highlightedIndex\n  } = state;\n\n  if (items.length === 0) {\n    return -1;\n  } // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n\n\n  if (initialHighlightedIndex !== undefined && highlightedIndex === initialHighlightedIndex) {\n    return initialHighlightedIndex;\n  }\n\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex;\n  }\n\n  if (selectedItem) {\n    return items.indexOf(selectedItem);\n  }\n\n  if (offset === 0) {\n    return -1;\n  }\n\n  return offset < 0 ? items.length - 1 : 0;\n}\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\n\n\nfunction useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {\n  const mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false\n  });\n  useEffect(() => {\n    // The same strategy for checking if a click occurred inside or outside downsift\n    // as in downshift.js.\n    const onMouseDown = () => {\n      mouseAndTouchTrackersRef.current.isMouseDown = true;\n    };\n\n    const onMouseUp = event => {\n      mouseAndTouchTrackersRef.current.isMouseDown = false;\n\n      if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(ref => ref.current), environment)) {\n        handleBlur();\n      }\n    };\n\n    const onTouchStart = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = false;\n    };\n\n    const onTouchMove = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = true;\n    };\n\n    const onTouchEnd = event => {\n      if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(ref => ref.current), environment, false)) {\n        handleBlur();\n      }\n    };\n\n    environment.addEventListener('mousedown', onMouseDown);\n    environment.addEventListener('mouseup', onMouseUp);\n    environment.addEventListener('touchstart', onTouchStart);\n    environment.addEventListener('touchmove', onTouchMove);\n    environment.addEventListener('touchend', onTouchEnd);\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown);\n      environment.removeEventListener('mouseup', onMouseUp);\n      environment.removeEventListener('touchstart', onTouchStart);\n      environment.removeEventListener('touchmove', onTouchMove);\n      environment.removeEventListener('touchend', onTouchEnd);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment]);\n  return mouseAndTouchTrackersRef;\n}\n/* istanbul ignore next */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nlet useGetterPropsCalledChecker = () => noop;\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */\n\n/* istanbul ignore next */\n\n\nif (process.env.NODE_ENV !== 'production') {\n  useGetterPropsCalledChecker = function () {\n    const isInitialMountRef = useRef(true);\n\n    for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {\n      propKeys[_key] = arguments[_key];\n    }\n\n    const getterPropsCalledRef = useRef(propKeys.reduce((acc, propKey) => {\n      acc[propKey] = {};\n      return acc;\n    }, {}));\n    useEffect(() => {\n      Object.keys(getterPropsCalledRef.current).forEach(propKey => {\n        const propCallInfo = getterPropsCalledRef.current[propKey];\n\n        if (isInitialMountRef.current) {\n          if (!Object.keys(propCallInfo).length) {\n            // eslint-disable-next-line no-console\n            console.error(`downshift: You forgot to call the ${propKey} getter function on your component / element.`);\n            return;\n          }\n        }\n\n        const {\n          suppressRefError,\n          refKey,\n          elementRef\n        } = propCallInfo;\n\n        if ((!elementRef || !elementRef.current) && !suppressRefError) {\n          // eslint-disable-next-line no-console\n          console.error(`downshift: The ref prop \"${refKey}\" from ${propKey} was not applied correctly on your element.`);\n        }\n      });\n      isInitialMountRef.current = false;\n    });\n    const setGetterPropCallInfo = useCallback((propKey, suppressRefError, refKey, elementRef) => {\n      getterPropsCalledRef.current[propKey] = {\n        suppressRefError,\n        refKey,\n        elementRef\n      };\n    }, []);\n    return setGetterPropCallInfo;\n  };\n}\n\nfunction useA11yMessageSetter(getA11yMessage, dependencyArray, _ref2) {\n  let {\n    isInitialMount,\n    highlightedIndex,\n    items,\n    environment,\n    ...rest\n  } = _ref2; // Sets a11y status message on changes in state.\n\n  useEffect(() => {\n    if (isInitialMount || false) {\n      return;\n    }\n\n    updateA11yStatus(() => getA11yMessage({\n      highlightedIndex,\n      highlightedItem: items[highlightedIndex],\n      resultCount: items.length,\n      ...rest\n    }), environment.document); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencyArray);\n}\n\nfunction useScrollIntoView(_ref3) {\n  let {\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    getItemNodeFromIndex,\n    menuElement,\n    scrollIntoView: scrollIntoViewProp\n  } = _ref3; // used not to scroll on highlight by mouse.\n\n  const shouldScrollRef = useRef(true); // Scroll on highlighted item if change comes from keyboard.\n\n  useIsomorphicLayoutEffect(() => {\n    if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {\n      return;\n    }\n\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true;\n    } else {\n      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [highlightedIndex]);\n  return shouldScrollRef;\n} // eslint-disable-next-line import/no-mutable-exports\n\n\nlet useControlPropsValidator = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  useControlPropsValidator = _ref4 => {\n    let {\n      isInitialMount,\n      props,\n      state\n    } = _ref4; // used for checking when props are moving from controlled to uncontrolled.\n\n    const prevPropsRef = useRef(props);\n    useEffect(() => {\n      if (isInitialMount) {\n        return;\n      }\n\n      validateControlledUnchanged(state, prevPropsRef.current, props);\n      prevPropsRef.current = props;\n    }, [state, props, isInitialMount]);\n  };\n}\n\nfunction downshiftCommonReducer(state, action, stateChangeTypes) {\n  const {\n    type,\n    props\n  } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.disabled ? -1 : action.index\n      };\n      break;\n\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex\n      };\n      break;\n\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        selectedItem: getDefaultValue$1(props, 'selectedItem'),\n        inputValue: getDefaultValue$1(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return { ...state,\n    ...changes\n  };\n}\n/* eslint-enable complexity */\n\n\nfunction getItemIndexByCharacterKey(_a) {\n  var keysSoFar = _a.keysSoFar,\n      highlightedIndex = _a.highlightedIndex,\n      items = _a.items,\n      itemToString = _a.itemToString,\n      getItemNodeFromIndex = _a.getItemNodeFromIndex;\n  var lowerCasedKeysSoFar = keysSoFar.toLowerCase();\n\n  for (var index = 0; index < items.length; index++) {\n    var offsetIndex = (index + highlightedIndex + 1) % items.length;\n    var item = items[offsetIndex];\n\n    if (item !== undefined && itemToString(item).toLowerCase().startsWith(lowerCasedKeysSoFar)) {\n      var element = getItemNodeFromIndex(offsetIndex);\n\n      if (!(element === null || element === void 0 ? void 0 : element.hasAttribute('disabled'))) {\n        return offsetIndex;\n      }\n    }\n  }\n\n  return highlightedIndex;\n}\n\nvar propTypes$2 = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\n\nfunction getA11yStatusMessage(_a) {\n  var isOpen = _a.isOpen,\n      resultCount = _a.resultCount,\n      previousResultCount = _a.previousResultCount;\n\n  if (!isOpen) {\n    return '';\n  }\n\n  if (!resultCount) {\n    return 'No results are available.';\n  }\n\n  if (resultCount !== previousResultCount) {\n    return \"\".concat(resultCount, \" result\").concat(resultCount === 1 ? ' is' : 's are', \" available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.\");\n  }\n\n  return '';\n}\n\nvar defaultProps$2 = __assign(__assign({}, defaultProps$3), {\n  getA11yStatusMessage: getA11yStatusMessage\n}); // eslint-disable-next-line import/no-mutable-exports\n\n\nvar validatePropTypes$2 = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes$2 = function (options, caller) {\n    PropTypes.checkPropTypes(propTypes$2, options, 'prop', caller.name);\n  };\n}\n\nconst ToggleButtonClick$1 = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 0;\nconst ToggleButtonKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_down__' : 1;\nconst ToggleButtonKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_up__' : 2;\nconst ToggleButtonKeyDownCharacter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_character__' : 3;\nconst ToggleButtonKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_escape__' : 4;\nconst ToggleButtonKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_home__' : 5;\nconst ToggleButtonKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_end__' : 6;\nconst ToggleButtonKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_enter__' : 7;\nconst ToggleButtonKeyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_space_button__' : 8;\nconst ToggleButtonKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_up__' : 9;\nconst ToggleButtonKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_down__' : 10;\nconst ToggleButtonBlur = process.env.NODE_ENV !== \"production\" ? '__togglebutton_blur__' : 11;\nconst MenuMouseLeave$1 = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 12;\nconst ItemMouseMove$1 = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 13;\nconst ItemClick$1 = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 14;\nconst FunctionToggleMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nconst FunctionOpenMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nconst FunctionCloseMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nconst FunctionSetHighlightedIndex$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nconst FunctionSelectItem$1 = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nconst FunctionSetInputValue$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nconst FunctionReset$2 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\nvar stateChangeTypes$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ToggleButtonClick: ToggleButtonClick$1,\n  ToggleButtonKeyDownArrowDown: ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp: ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownCharacter: ToggleButtonKeyDownCharacter,\n  ToggleButtonKeyDownEscape: ToggleButtonKeyDownEscape,\n  ToggleButtonKeyDownHome: ToggleButtonKeyDownHome,\n  ToggleButtonKeyDownEnd: ToggleButtonKeyDownEnd,\n  ToggleButtonKeyDownEnter: ToggleButtonKeyDownEnter,\n  ToggleButtonKeyDownSpaceButton: ToggleButtonKeyDownSpaceButton,\n  ToggleButtonKeyDownPageUp: ToggleButtonKeyDownPageUp,\n  ToggleButtonKeyDownPageDown: ToggleButtonKeyDownPageDown,\n  ToggleButtonBlur: ToggleButtonBlur,\n  MenuMouseLeave: MenuMouseLeave$1,\n  ItemMouseMove: ItemMouseMove$1,\n  ItemClick: ItemClick$1,\n  FunctionToggleMenu: FunctionToggleMenu$1,\n  FunctionOpenMenu: FunctionOpenMenu$1,\n  FunctionCloseMenu: FunctionCloseMenu$1,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,\n  FunctionSelectItem: FunctionSelectItem$1,\n  FunctionSetInputValue: FunctionSetInputValue$1,\n  FunctionReset: FunctionReset$2\n});\n/* eslint-disable complexity */\n\nfunction downshiftSelectReducer(state, action) {\n  const {\n    type,\n    props,\n    altKey\n  } = action;\n  let changes;\n\n  switch (type) {\n    case ItemClick$1:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index]\n      };\n      break;\n\n    case ToggleButtonKeyDownCharacter:\n      {\n        const lowercasedKey = action.key;\n        const inputValue = `${state.inputValue}${lowercasedKey}`;\n        const prevHighlightedIndex = !state.isOpen && state.selectedItem ? props.items.indexOf(state.selectedItem) : state.highlightedIndex;\n        const highlightedIndex = getItemIndexByCharacterKey({\n          keysSoFar: inputValue,\n          highlightedIndex: prevHighlightedIndex,\n          items: props.items,\n          itemToString: props.itemToString,\n          getItemNodeFromIndex: action.getItemNodeFromIndex\n        });\n        changes = {\n          inputValue,\n          highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n\n    case ToggleButtonKeyDownArrowDown:\n      {\n        const highlightedIndex = state.isOpen ? getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1);\n        changes = {\n          highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n\n    case ToggleButtonKeyDownArrowUp:\n      if (state.isOpen && altKey) {\n        changes = {\n          isOpen: getDefaultValue$1(props, 'isOpen'),\n          highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n          ...(state.highlightedIndex >= 0 && {\n            selectedItem: props.items[state.highlightedIndex]\n          })\n        };\n      } else {\n        const highlightedIndex = state.isOpen ? getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : getHighlightedIndexOnOpen(props, state, -1);\n        changes = {\n          highlightedIndex,\n          isOpen: true\n        };\n      }\n\n      break;\n    // only triggered when menu is open.\n\n    case ToggleButtonKeyDownEnter:\n    case ToggleButtonKeyDownSpaceButton:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex]\n        })\n      };\n      break;\n\n    case ToggleButtonKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false),\n        isOpen: true\n      };\n      break;\n\n    case ToggleButtonKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false),\n        isOpen: true\n      };\n      break;\n\n    case ToggleButtonKeyDownPageUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case ToggleButtonKeyDownPageDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case ToggleButtonKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1\n      };\n      break;\n\n    case ToggleButtonBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex]\n        })\n      };\n      break;\n\n    case FunctionSelectItem$1:\n      changes = {\n        selectedItem: action.selectedItem\n      };\n      break;\n\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$2);\n  }\n\n  return { ...state,\n    ...changes\n  };\n}\n/* eslint-enable complexity */\n\n\nuseSelect.stateChangeTypes = stateChangeTypes$2;\n\nfunction useSelect(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n\n  validatePropTypes$2(userProps, useSelect); // Props defaults and destructuring.\n\n  const props = { ...defaultProps$2,\n    ...userProps\n  };\n  const {\n    items,\n    scrollIntoView,\n    environment,\n    itemToString,\n    getA11ySelectionMessage,\n    getA11yStatusMessage\n  } = props; // Initial state depending on controlled props.\n\n  const initialState = getInitialState$2(props);\n  const [state, dispatch] = useControlledReducer$1(downshiftSelectReducer, initialState, props);\n  const {\n    isOpen,\n    highlightedIndex,\n    selectedItem,\n    inputValue\n  } = state; // Element efs.\n\n  const toggleButtonRef = useRef(null);\n  const menuRef = useRef(null);\n  const itemRefs = useRef({}); // used to keep the inputValue clearTimeout object between renders.\n\n  const clearTimeoutRef = useRef(null); // prevent id re-generation between renders.\n\n  const elementIds = useElementIds(props); // used to keep track of how many items we had on previous cycle.\n\n  const previousResultCountRef = useRef();\n  const isInitialMountRef = useRef(true); // utility callback to get item element.\n\n  const latest = useLatestRef({\n    state,\n    props\n  }); // Some utils.\n\n  const getItemNodeFromIndex = useCallback(index => itemRefs.current[elementIds.getItemId(index)], [elementIds]); // Effects.\n  // Sets a11y status message on changes in state.\n\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  }); // Sets a11y status message on changes in selectedItem.\n\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  }); // Scroll on highlighted item if change comes from keyboard.\n\n  const shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    scrollIntoView,\n    getItemNodeFromIndex\n  }); // Sets cleanup for the keysSoFar callback, debounded after 500ms.\n\n  useEffect(() => {\n    // init the clean function here as we need access to dispatch.\n    clearTimeoutRef.current = debounce(outerDispatch => {\n      outerDispatch({\n        type: FunctionSetInputValue$1,\n        inputValue: ''\n      });\n    }, 500); // Cancel any pending debounced calls on mount\n\n    return () => {\n      clearTimeoutRef.current.cancel();\n    };\n  }, []); // Invokes the keysSoFar callback set up above.\n\n  useEffect(() => {\n    if (!inputValue) {\n      return;\n    }\n\n    clearTimeoutRef.current(dispatch);\n  }, [dispatch, inputValue]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state\n  });\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    previousResultCountRef.current = items.length;\n  }); // Add mouse/touch events to document.\n\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, () => {\n    dispatch({\n      type: ToggleButtonBlur\n    });\n  });\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getMenuProps', 'getToggleButtonProps'); // Make initial ref false.\n\n  useEffect(() => {\n    isInitialMountRef.current = false;\n  }, []); // Reset itemRefs on close.\n\n  useEffect(() => {\n    if (!isOpen) {\n      itemRefs.current = {};\n    }\n  }, [isOpen]); // Event handler functions.\n\n  const toggleButtonKeyDownHandlers = useMemo(() => ({\n    ArrowDown(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownArrowDown,\n        getItemNodeFromIndex,\n        altKey: event.altKey\n      });\n    },\n\n    ArrowUp(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownArrowUp,\n        getItemNodeFromIndex,\n        altKey: event.altKey\n      });\n    },\n\n    Home(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownHome,\n        getItemNodeFromIndex\n      });\n    },\n\n    End(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownEnd,\n        getItemNodeFromIndex\n      });\n    },\n\n    Escape() {\n      if (latest.current.state.isOpen) {\n        dispatch({\n          type: ToggleButtonKeyDownEscape\n        });\n      }\n    },\n\n    Enter(event) {\n      event.preventDefault();\n      dispatch({\n        type: latest.current.state.isOpen ? ToggleButtonKeyDownEnter : ToggleButtonClick$1\n      });\n    },\n\n    PageUp(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownPageUp,\n          getItemNodeFromIndex\n        });\n      }\n    },\n\n    PageDown(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownPageDown,\n          getItemNodeFromIndex\n        });\n      }\n    },\n\n    ' '(event) {\n      event.preventDefault();\n      dispatch({\n        type: latest.current.state.isOpen ? ToggleButtonKeyDownSpaceButton : ToggleButtonClick$1\n      });\n    }\n\n  }), [dispatch, getItemNodeFromIndex, latest]); // Action functions.\n\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: FunctionToggleMenu$1\n    });\n  }, [dispatch]);\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: FunctionCloseMenu$1\n    });\n  }, [dispatch]);\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: FunctionOpenMenu$1\n    });\n  }, [dispatch]);\n  const setHighlightedIndex = useCallback(newHighlightedIndex => {\n    dispatch({\n      type: FunctionSetHighlightedIndex$1,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  const selectItem = useCallback(newSelectedItem => {\n    dispatch({\n      type: FunctionSelectItem$1,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  const reset = useCallback(() => {\n    dispatch({\n      type: FunctionReset$2\n    });\n  }, [dispatch]);\n  const setInputValue = useCallback(newInputValue => {\n    dispatch({\n      type: FunctionSetInputValue$1,\n      inputValue: newInputValue\n    });\n  }, [dispatch]); // Getter functions.\n\n  const getLabelProps = useCallback(labelProps => ({\n    id: elementIds.labelId,\n    htmlFor: elementIds.toggleButtonId,\n    ...labelProps\n  }), [elementIds]);\n  const getMenuProps = useCallback(function (_temp, _temp2) {\n    let {\n      onMouseLeave,\n      refKey = 'ref',\n      onKeyDown,\n      onBlur,\n      ref,\n      ...rest\n    } = _temp === void 0 ? {} : _temp;\n    let {\n      suppressRefError = false\n    } = _temp2 === void 0 ? {} : _temp2;\n\n    const menuHandleMouseLeave = () => {\n      dispatch({\n        type: MenuMouseLeave$1\n      });\n    };\n\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return {\n      [refKey]: handleRefs(ref, menuNode => {\n        menuRef.current = menuNode;\n      }),\n      id: elementIds.menuId,\n      role: 'listbox',\n      'aria-labelledby': elementIds.labelId,\n      tabIndex: -1,\n      onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n      ...rest\n    };\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  const getToggleButtonProps = useCallback(function (_temp3, _temp4) {\n    let {\n      onBlur,\n      onClick,\n      onKeyDown,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp3 === void 0 ? {} : _temp3;\n    let {\n      suppressRefError = false\n    } = _temp4 === void 0 ? {} : _temp4;\n    const latestState = latest.current.state;\n\n    const toggleButtonHandleClick = () => {\n      dispatch({\n        type: ToggleButtonClick$1\n      });\n    };\n\n    const toggleButtonHandleBlur = () => {\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        dispatch({\n          type: ToggleButtonBlur\n        });\n      }\n    };\n\n    const toggleButtonHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n\n      if (key && toggleButtonKeyDownHandlers[key]) {\n        toggleButtonKeyDownHandlers[key](event);\n      } else if (isAcceptedCharacterKey(key)) {\n        dispatch({\n          type: ToggleButtonKeyDownCharacter,\n          key,\n          getItemNodeFromIndex\n        });\n      }\n    };\n\n    const toggleProps = {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode;\n      }),\n      'aria-activedescendant': latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '',\n      'aria-controls': elementIds.menuId,\n      'aria-expanded': latest.current.state.isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-labelledby': `${elementIds.labelId}`,\n      id: elementIds.toggleButtonId,\n      role: 'combobox',\n      tabIndex: 0,\n      onBlur: callAllEventHandlers(onBlur, toggleButtonHandleBlur),\n      ...rest\n    };\n\n    if (!rest.disabled) {\n      toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);\n      toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);\n    }\n\n    setGetterPropCallInfo('getToggleButtonProps', suppressRefError, refKey, toggleButtonRef);\n    return toggleProps;\n  }, [latest, elementIds, setGetterPropCallInfo, dispatch, mouseAndTouchTrackersRef, toggleButtonKeyDownHandlers, getItemNodeFromIndex]);\n  const getItemProps = useCallback(function (_temp5) {\n    let {\n      item: itemProp,\n      index: indexProp,\n      onMouseMove,\n      onClick,\n      refKey = 'ref',\n      ref,\n      disabled,\n      ...rest\n    } = _temp5 === void 0 ? {} : _temp5;\n    const {\n      state: latestState,\n      props: latestProps\n    } = latest.current;\n    const item = itemProp ?? items[indexProp];\n    const index = getItemIndex(indexProp, item, latestProps.items);\n\n    const itemHandleMouseMove = () => {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove$1,\n        index,\n        disabled\n      });\n    };\n\n    const itemHandleClick = () => {\n      dispatch({\n        type: ItemClick$1,\n        index\n      });\n    };\n\n    const itemIndex = getItemIndex(index, item, latestProps.items);\n\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!');\n    }\n\n    const itemProps = {\n      disabled,\n      role: 'option',\n      'aria-selected': `${item === selectedItem}`,\n      id: elementIds.getItemId(itemIndex),\n      [refKey]: handleRefs(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;\n        }\n      }),\n      ...rest\n    };\n\n    if (!disabled) {\n      itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);\n    }\n\n    itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);\n    return itemProps;\n  }, [latest, items, selectedItem, elementIds, shouldScrollRef, dispatch]);\n  return {\n    // prop getters.\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    selectItem,\n    reset,\n    setInputValue,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue\n  };\n}\n\nconst InputKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_down__' : 0;\nconst InputKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_up__' : 1;\nconst InputKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__input_keydown_escape__' : 2;\nconst InputKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__input_keydown_home__' : 3;\nconst InputKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__input_keydown_end__' : 4;\nconst InputKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_up__' : 5;\nconst InputKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_down__' : 6;\nconst InputKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__input_keydown_enter__' : 7;\nconst InputChange = process.env.NODE_ENV !== \"production\" ? '__input_change__' : 8;\nconst InputBlur = process.env.NODE_ENV !== \"production\" ? '__input_blur__' : 9;\nconst InputFocus = process.env.NODE_ENV !== \"production\" ? '__input_focus__' : 10;\nconst MenuMouseLeave = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 11;\nconst ItemMouseMove = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 12;\nconst ItemClick = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 13;\nconst ToggleButtonClick = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 14;\nconst FunctionToggleMenu = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nconst FunctionOpenMenu = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nconst FunctionCloseMenu = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nconst FunctionSetHighlightedIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nconst FunctionSelectItem = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nconst FunctionSetInputValue = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nconst FunctionReset$1 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\nconst ControlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__controlled_prop_updated_selected_item__' : 22;\nvar stateChangeTypes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  InputKeyDownArrowDown: InputKeyDownArrowDown,\n  InputKeyDownArrowUp: InputKeyDownArrowUp,\n  InputKeyDownEscape: InputKeyDownEscape,\n  InputKeyDownHome: InputKeyDownHome,\n  InputKeyDownEnd: InputKeyDownEnd,\n  InputKeyDownPageUp: InputKeyDownPageUp,\n  InputKeyDownPageDown: InputKeyDownPageDown,\n  InputKeyDownEnter: InputKeyDownEnter,\n  InputChange: InputChange,\n  InputBlur: InputBlur,\n  InputFocus: InputFocus,\n  MenuMouseLeave: MenuMouseLeave,\n  ItemMouseMove: ItemMouseMove,\n  ItemClick: ItemClick,\n  ToggleButtonClick: ToggleButtonClick,\n  FunctionToggleMenu: FunctionToggleMenu,\n  FunctionOpenMenu: FunctionOpenMenu,\n  FunctionCloseMenu: FunctionCloseMenu,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex,\n  FunctionSelectItem: FunctionSelectItem,\n  FunctionSetInputValue: FunctionSetInputValue,\n  FunctionReset: FunctionReset$1,\n  ControlledPropUpdatedSelectedItem: ControlledPropUpdatedSelectedItem\n});\n\nfunction getInitialState$1(props) {\n  const initialState = getInitialState$2(props);\n  const {\n    selectedItem\n  } = initialState;\n  let {\n    inputValue\n  } = initialState;\n\n  if (inputValue === '' && selectedItem && props.defaultInputValue === undefined && props.initialInputValue === undefined && props.inputValue === undefined) {\n    inputValue = props.itemToString(selectedItem);\n  }\n\n  return { ...initialState,\n    inputValue\n  };\n}\n\nconst propTypes$1 = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\n\nfunction useControlledReducer(reducer, initialState, props) {\n  const previousSelectedItemRef = useRef();\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props); // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n\n  useEffect(() => {\n    if (isControlledProp(props, 'selectedItem')) {\n      if (previousSelectedItemRef.current !== props.selectedItem) {\n        dispatch({\n          type: ControlledPropUpdatedSelectedItem,\n          inputValue: props.itemToString(props.selectedItem)\n        });\n      }\n\n      previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;\n    }\n  });\n  return [getState(state, props), dispatch];\n} // eslint-disable-next-line import/no-mutable-exports\n\n\nlet validatePropTypes$1 = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes$1 = (options, caller) => {\n    PropTypes.checkPropTypes(propTypes$1, options, 'prop', caller.name);\n  };\n}\n\nconst defaultProps$1 = { ...defaultProps$3,\n  getA11yStatusMessage: getA11yStatusMessage$1\n};\n/* eslint-disable complexity */\n\nfunction downshiftUseComboboxReducer(state, action) {\n  const {\n    type,\n    props,\n    altKey\n  } = action;\n  let changes;\n\n  switch (type) {\n    case ItemClick:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)\n        };\n      } else {\n        changes = {\n          highlightedIndex: altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n\n      break;\n\n    case InputKeyDownArrowUp:\n      if (state.isOpen) {\n        if (altKey) {\n          changes = {\n            isOpen: getDefaultValue$1(props, 'isOpen'),\n            highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n            ...(state.highlightedIndex >= 0 && {\n              selectedItem: props.items[state.highlightedIndex],\n              inputValue: props.itemToString(props.items[state.highlightedIndex])\n            })\n          };\n        } else {\n          changes = {\n            highlightedIndex: getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)\n          };\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n\n      break;\n\n    case InputKeyDownEnter:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          inputValue: props.itemToString(props.items[state.highlightedIndex])\n        })\n      };\n      break;\n\n    case InputKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(!state.isOpen && {\n          selectedItem: null,\n          inputValue: ''\n        })\n      };\n      break;\n\n    case InputKeyDownPageUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case InputKeyDownPageDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n\n    case InputBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(state.highlightedIndex >= 0 && action.selectItem && {\n          selectedItem: props.items[state.highlightedIndex],\n          inputValue: props.itemToString(props.items[state.highlightedIndex])\n        })\n      };\n      break;\n\n    case InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        inputValue: action.inputValue\n      };\n      break;\n\n    case InputFocus:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n\n    case FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case ControlledPropUpdatedSelectedItem:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$1);\n  }\n\n  return { ...state,\n    ...changes\n  };\n}\n/* eslint-enable complexity */\n\n/* eslint-disable max-statements */\n\n\nuseCombobox.stateChangeTypes = stateChangeTypes$1;\n\nfunction useCombobox(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n\n  validatePropTypes$1(userProps, useCombobox); // Props defaults and destructuring.\n\n  const props = { ...defaultProps$1,\n    ...userProps\n  };\n  const {\n    initialIsOpen,\n    defaultIsOpen,\n    items,\n    scrollIntoView,\n    environment,\n    getA11yStatusMessage,\n    getA11ySelectionMessage,\n    itemToString\n  } = props; // Initial state depending on controlled props.\n\n  const initialState = getInitialState$1(props);\n  const [state, dispatch] = useControlledReducer(downshiftUseComboboxReducer, initialState, props);\n  const {\n    isOpen,\n    highlightedIndex,\n    selectedItem,\n    inputValue\n  } = state; // Element refs.\n\n  const menuRef = useRef(null);\n  const itemRefs = useRef({});\n  const inputRef = useRef(null);\n  const toggleButtonRef = useRef(null);\n  const isInitialMountRef = useRef(true); // prevent id re-generation between renders.\n\n  const elementIds = useElementIds(props); // used to keep track of how many items we had on previous cycle.\n\n  const previousResultCountRef = useRef(); // utility callback to get item element.\n\n  const latest = useLatestRef({\n    state,\n    props\n  });\n  const getItemNodeFromIndex = useCallback(index => itemRefs.current[elementIds.getItemId(index)], [elementIds]); // Effects.\n  // Sets a11y status message on changes in state.\n\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  }); // Sets a11y status message on changes in selectedItem.\n\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  }); // Scroll on highlighted item if change comes from keyboard.\n\n  const shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    scrollIntoView,\n    getItemNodeFromIndex\n  });\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state\n  }); // Focus the input on first render if required.\n\n  useEffect(() => {\n    const focusOnOpen = initialIsOpen || defaultIsOpen || isOpen;\n\n    if (focusOnOpen && inputRef.current) {\n      inputRef.current.focus();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    previousResultCountRef.current = items.length;\n  }); // Add mouse/touch events to document.\n\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [inputRef, menuRef, toggleButtonRef], environment, () => {\n    dispatch({\n      type: InputBlur,\n      selectItem: false\n    });\n  });\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getInputProps', 'getMenuProps'); // Make initial ref false.\n\n  useEffect(() => {\n    isInitialMountRef.current = false;\n  }, []); // Reset itemRefs on close.\n\n  useEffect(() => {\n    if (!isOpen) {\n      itemRefs.current = {};\n    } else if (document.activeElement !== inputRef.current) {\n      var _inputRef$current;\n\n      inputRef == null ? void 0 : (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n    }\n  }, [isOpen]);\n  /* Event handler functions */\n\n  const inputKeyDownHandlers = useMemo(() => ({\n    ArrowDown(event) {\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownArrowDown,\n        altKey: event.altKey,\n        getItemNodeFromIndex\n      });\n    },\n\n    ArrowUp(event) {\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownArrowUp,\n        altKey: event.altKey,\n        getItemNodeFromIndex\n      });\n    },\n\n    Home(event) {\n      if (!latest.current.state.isOpen) {\n        return;\n      }\n\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownHome,\n        getItemNodeFromIndex\n      });\n    },\n\n    End(event) {\n      if (!latest.current.state.isOpen) {\n        return;\n      }\n\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownEnd,\n        getItemNodeFromIndex\n      });\n    },\n\n    Escape(event) {\n      const latestState = latest.current.state;\n\n      if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEscape\n        });\n      }\n    },\n\n    Enter(event) {\n      const latestState = latest.current.state; // if closed or no highlighted index, do nothing.\n\n      if (!latestState.isOpen || event.which === 229 // if IME composing, wait for next Enter keydown event.\n      ) {\n        return;\n      }\n\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownEnter,\n        getItemNodeFromIndex\n      });\n    },\n\n    PageUp(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownPageUp,\n          getItemNodeFromIndex\n        });\n      }\n    },\n\n    PageDown(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownPageDown,\n          getItemNodeFromIndex\n        });\n      }\n    }\n\n  }), [dispatch, latest, getItemNodeFromIndex]); // Getter props.\n\n  const getLabelProps = useCallback(labelProps => ({\n    id: elementIds.labelId,\n    htmlFor: elementIds.inputId,\n    ...labelProps\n  }), [elementIds]);\n  const getMenuProps = useCallback(function (_temp, _temp2) {\n    let {\n      onMouseLeave,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp === void 0 ? {} : _temp;\n    let {\n      suppressRefError = false\n    } = _temp2 === void 0 ? {} : _temp2;\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return {\n      [refKey]: handleRefs(ref, menuNode => {\n        menuRef.current = menuNode;\n      }),\n      id: elementIds.menuId,\n      role: 'listbox',\n      'aria-labelledby': elementIds.labelId,\n      onMouseLeave: callAllEventHandlers(onMouseLeave, () => {\n        dispatch({\n          type: MenuMouseLeave\n        });\n      }),\n      ...rest\n    };\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  const getItemProps = useCallback(function (_temp3) {\n    let {\n      item,\n      index,\n      refKey = 'ref',\n      ref,\n      onMouseMove,\n      onMouseDown,\n      onClick,\n      onPress,\n      disabled,\n      ...rest\n    } = _temp3 === void 0 ? {} : _temp3;\n    const {\n      props: latestProps,\n      state: latestState\n    } = latest.current;\n    const itemIndex = getItemIndex(index, item, latestProps.items);\n\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!');\n    }\n\n    const onSelectKey = 'onClick';\n    const customClickHandler = onClick;\n\n    const itemHandleMouseMove = () => {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove,\n        index,\n        disabled\n      });\n    };\n\n    const itemHandleClick = () => {\n      dispatch({\n        type: ItemClick,\n        index\n      });\n    };\n\n    const itemHandleMouseDown = e => e.preventDefault();\n\n    return {\n      [refKey]: handleRefs(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;\n        }\n      }),\n      disabled,\n      role: 'option',\n      'aria-selected': `${itemIndex === latestState.highlightedIndex}`,\n      id: elementIds.getItemId(itemIndex),\n      ...(!disabled && {\n        [onSelectKey]: callAllEventHandlers(customClickHandler, itemHandleClick)\n      }),\n      onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),\n      onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown),\n      ...rest\n    };\n  }, [dispatch, latest, shouldScrollRef, elementIds]);\n  const getToggleButtonProps = useCallback(function (_temp4) {\n    let {\n      onClick,\n      onPress,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp4 === void 0 ? {} : _temp4;\n    const latestState = latest.current.state;\n\n    const toggleButtonHandleClick = () => {\n      dispatch({\n        type: ToggleButtonClick\n      });\n    };\n\n    return {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode;\n      }),\n      'aria-controls': elementIds.menuId,\n      'aria-expanded': latestState.isOpen,\n      id: elementIds.toggleButtonId,\n      tabIndex: -1,\n      ...(!rest.disabled && { ...{\n          onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)\n        }\n      }),\n      ...rest\n    };\n  }, [dispatch, latest, elementIds]);\n  const getInputProps = useCallback(function (_temp5, _temp6) {\n    let {\n      onKeyDown,\n      onChange,\n      onInput,\n      onFocus,\n      onBlur,\n      onChangeText,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp5 === void 0 ? {} : _temp5;\n    let {\n      suppressRefError = false\n    } = _temp6 === void 0 ? {} : _temp6;\n    setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef);\n    const latestState = latest.current.state;\n\n    const inputHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n\n      if (key && inputKeyDownHandlers[key]) {\n        inputKeyDownHandlers[key](event);\n      }\n    };\n\n    const inputHandleChange = event => {\n      dispatch({\n        type: InputChange,\n        inputValue: event.target.value\n      });\n    };\n\n    const inputHandleBlur = () => {\n      /* istanbul ignore else */\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        dispatch({\n          type: InputBlur,\n          selectItem: true\n        });\n      }\n    };\n\n    const inputHandleFocus = () => {\n      if (!latestState.isOpen) {\n        dispatch({\n          type: InputFocus\n        });\n      }\n    };\n    /* istanbul ignore next (preact) */\n\n\n    const onChangeKey = 'onChange';\n    let eventHandlers = {};\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(onChange, onInput, inputHandleChange),\n        onKeyDown: callAllEventHandlers(onKeyDown, inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, inputHandleBlur),\n        onFocus: callAllEventHandlers(onFocus, inputHandleFocus)\n      };\n    }\n\n    return {\n      [refKey]: handleRefs(ref, inputNode => {\n        inputRef.current = inputNode;\n      }),\n      'aria-activedescendant': latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '',\n      'aria-autocomplete': 'list',\n      'aria-controls': elementIds.menuId,\n      'aria-expanded': latestState.isOpen,\n      'aria-labelledby': elementIds.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      id: elementIds.inputId,\n      role: 'combobox',\n      value: latestState.inputValue,\n      ...eventHandlers,\n      ...rest\n    };\n  }, [dispatch, inputKeyDownHandlers, latest, mouseAndTouchTrackersRef, setGetterPropCallInfo, elementIds]); // returns\n\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: FunctionToggleMenu\n    });\n  }, [dispatch]);\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: FunctionCloseMenu\n    });\n  }, [dispatch]);\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: FunctionOpenMenu\n    });\n  }, [dispatch]);\n  const setHighlightedIndex = useCallback(newHighlightedIndex => {\n    dispatch({\n      type: FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  const selectItem = useCallback(newSelectedItem => {\n    dispatch({\n      type: FunctionSelectItem,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  const setInputValue = useCallback(newInputValue => {\n    dispatch({\n      type: FunctionSetInputValue,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  const reset = useCallback(() => {\n    dispatch({\n      type: FunctionReset$1\n    });\n  }, [dispatch]);\n  return {\n    // prop getters.\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getToggleButtonProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    setInputValue,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue\n  };\n}\n\nconst defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: []\n};\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\n\nfunction getInitialValue(props, propKey) {\n  return getInitialValue$1(props, propKey, defaultStateValues);\n}\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\n\n\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\n\n\nfunction getInitialState(props) {\n  const activeIndex = getInitialValue(props, 'activeIndex');\n  const selectedItems = getInitialValue(props, 'selectedItems');\n  return {\n    activeIndex,\n    selectedItems\n  };\n}\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\n\n\nfunction isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false;\n  }\n\n  const element = event.target;\n\n  if (element instanceof HTMLInputElement && // if element is a text input\n  element.value !== '' && ( // and we have text in it\n  // and cursor is either not at the start or is currently highlighting text.\n  element.selectionStart !== 0 || element.selectionEnd !== 0)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\n\n\nfunction getA11yRemovalMessage(selectionParameters) {\n  const {\n    removedSelectedItem,\n    itemToString: itemToStringLocal\n  } = selectionParameters;\n  return `${itemToStringLocal(removedSelectedItem)} has been removed.`;\n}\n\nconst propTypes = {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  itemToString: PropTypes.func,\n  getA11yRemovalMessage: PropTypes.func,\n  stateReducer: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\nconst defaultProps = {\n  itemToString: defaultProps$3.itemToString,\n  stateReducer: defaultProps$3.stateReducer,\n  environment: defaultProps$3.environment,\n  getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft'\n}; // eslint-disable-next-line import/no-mutable-exports\n\nlet validatePropTypes = noop;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = (options, caller) => {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name);\n  };\n}\n\nconst SelectedItemClick = process.env.NODE_ENV !== \"production\" ? '__selected_item_click__' : 0;\nconst SelectedItemKeyDownDelete = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_delete__' : 1;\nconst SelectedItemKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_backspace__' : 2;\nconst SelectedItemKeyDownNavigationNext = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_next__' : 3;\nconst SelectedItemKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_previous__' : 4;\nconst DropdownKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_navigation_previous__' : 5;\nconst DropdownKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_backspace__' : 6;\nconst DropdownClick = process.env.NODE_ENV !== \"production\" ? '__dropdown_click__' : 7;\nconst FunctionAddSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_add_selected_item__' : 8;\nconst FunctionRemoveSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_remove_selected_item__' : 9;\nconst FunctionSetSelectedItems = process.env.NODE_ENV !== \"production\" ? '__function_set_selected_items__' : 10;\nconst FunctionSetActiveIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_active_index__' : 11;\nconst FunctionReset = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 12;\nvar stateChangeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SelectedItemClick: SelectedItemClick,\n  SelectedItemKeyDownDelete: SelectedItemKeyDownDelete,\n  SelectedItemKeyDownBackspace: SelectedItemKeyDownBackspace,\n  SelectedItemKeyDownNavigationNext: SelectedItemKeyDownNavigationNext,\n  SelectedItemKeyDownNavigationPrevious: SelectedItemKeyDownNavigationPrevious,\n  DropdownKeyDownNavigationPrevious: DropdownKeyDownNavigationPrevious,\n  DropdownKeyDownBackspace: DropdownKeyDownBackspace,\n  DropdownClick: DropdownClick,\n  FunctionAddSelectedItem: FunctionAddSelectedItem,\n  FunctionRemoveSelectedItem: FunctionRemoveSelectedItem,\n  FunctionSetSelectedItems: FunctionSetSelectedItems,\n  FunctionSetActiveIndex: FunctionSetActiveIndex,\n  FunctionReset: FunctionReset\n});\n/* eslint-disable complexity */\n\nfunction downshiftMultipleSelectionReducer(state, action) {\n  const {\n    type,\n    index,\n    props,\n    selectedItem\n  } = action;\n  const {\n    activeIndex,\n    selectedItems\n  } = state;\n  let changes;\n\n  switch (type) {\n    case SelectedItemClick:\n      changes = {\n        activeIndex: index\n      };\n      break;\n\n    case SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1\n      };\n      break;\n\n    case SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1\n      };\n      break;\n\n    case SelectedItemKeyDownBackspace:\n    case SelectedItemKeyDownDelete:\n      {\n        let newActiveIndex = activeIndex;\n\n        if (selectedItems.length === 1) {\n          newActiveIndex = -1;\n        } else if (activeIndex === selectedItems.length - 1) {\n          newActiveIndex = selectedItems.length - 2;\n        }\n\n        changes = {\n          selectedItems: [...selectedItems.slice(0, activeIndex), ...selectedItems.slice(activeIndex + 1)],\n          ...{\n            activeIndex: newActiveIndex\n          }\n        };\n        break;\n      }\n\n    case DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1\n      };\n      break;\n\n    case DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1)\n      };\n      break;\n\n    case FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [...selectedItems, selectedItem]\n      };\n      break;\n\n    case DropdownClick:\n      changes = {\n        activeIndex: -1\n      };\n      break;\n\n    case FunctionRemoveSelectedItem:\n      {\n        let newActiveIndex = activeIndex;\n        const selectedItemIndex = selectedItems.indexOf(selectedItem);\n\n        if (selectedItemIndex >= 0) {\n          if (selectedItems.length === 1) {\n            newActiveIndex = -1;\n          } else if (selectedItemIndex === selectedItems.length - 1) {\n            newActiveIndex = selectedItems.length - 2;\n          }\n\n          changes = {\n            selectedItems: [...selectedItems.slice(0, selectedItemIndex), ...selectedItems.slice(selectedItemIndex + 1)],\n            activeIndex: newActiveIndex\n          };\n        }\n\n        break;\n      }\n\n    case FunctionSetSelectedItems:\n      {\n        const {\n          selectedItems: newSelectedItems\n        } = action;\n        changes = {\n          selectedItems: newSelectedItems\n        };\n        break;\n      }\n\n    case FunctionSetActiveIndex:\n      {\n        const {\n          activeIndex: newActiveIndex\n        } = action;\n        changes = {\n          activeIndex: newActiveIndex\n        };\n        break;\n      }\n\n    case FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return { ...state,\n    ...changes\n  };\n}\n\nuseMultipleSelection.stateChangeTypes = stateChangeTypes;\n\nfunction useMultipleSelection(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n\n  validatePropTypes(userProps, useMultipleSelection); // Props defaults and destructuring.\n\n  const props = { ...defaultProps,\n    ...userProps\n  };\n  const {\n    getA11yRemovalMessage,\n    itemToString,\n    environment,\n    keyNavigationNext,\n    keyNavigationPrevious\n  } = props; // Reducer init.\n\n  const [state, dispatch] = useControlledReducer$1(downshiftMultipleSelectionReducer, getInitialState(props), props);\n  const {\n    activeIndex,\n    selectedItems\n  } = state; // Refs.\n\n  const isInitialMountRef = useRef(true);\n  const dropdownRef = useRef(null);\n  const previousSelectedItemsRef = useRef(selectedItems);\n  const selectedItemRefs = useRef();\n  selectedItemRefs.current = [];\n  const latest = useLatestRef({\n    state,\n    props\n  }); // Effects.\n\n  /* Sets a11y status message on changes in selectedItem. */\n\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      const removedSelectedItem = previousSelectedItemsRef.current.find(item => selectedItems.indexOf(item) < 0);\n      setStatus(getA11yRemovalMessage({\n        itemToString,\n        resultCount: selectedItems.length,\n        removedSelectedItem,\n        activeIndex,\n        activeSelectedItem: selectedItems[activeIndex]\n      }), environment.document);\n    }\n\n    previousSelectedItemsRef.current = selectedItems; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length]); // Sets focus on active item.\n\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus();\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus();\n    }\n  }, [activeIndex]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state\n  });\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps'); // Make initial ref false.\n\n  useEffect(() => {\n    isInitialMountRef.current = false;\n  }, []); // Event handler functions.\n\n  const selectedItemKeyDownHandlers = useMemo(() => ({\n    [keyNavigationPrevious]() {\n      dispatch({\n        type: SelectedItemKeyDownNavigationPrevious\n      });\n    },\n\n    [keyNavigationNext]() {\n      dispatch({\n        type: SelectedItemKeyDownNavigationNext\n      });\n    },\n\n    Delete() {\n      dispatch({\n        type: SelectedItemKeyDownDelete\n      });\n    },\n\n    Backspace() {\n      dispatch({\n        type: SelectedItemKeyDownBackspace\n      });\n    }\n\n  }), [dispatch, keyNavigationNext, keyNavigationPrevious]);\n  const dropdownKeyDownHandlers = useMemo(() => ({\n    [keyNavigationPrevious](event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownNavigationPrevious\n        });\n      }\n    },\n\n    Backspace(event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownBackspace\n        });\n      }\n    }\n\n  }), [dispatch, keyNavigationPrevious]); // Getter props.\n\n  const getSelectedItemProps = useCallback(function (_temp) {\n    let {\n      refKey = 'ref',\n      ref,\n      onClick,\n      onKeyDown,\n      selectedItem,\n      index,\n      ...rest\n    } = _temp === void 0 ? {} : _temp;\n    const {\n      state: latestState\n    } = latest.current;\n    const itemIndex = getItemIndex(index, selectedItem, latestState.selectedItems);\n\n    if (itemIndex < 0) {\n      throw new Error('Pass either selectedItem or index in getSelectedItemProps!');\n    }\n\n    const selectedItemHandleClick = () => {\n      dispatch({\n        type: SelectedItemClick,\n        index\n      });\n    };\n\n    const selectedItemHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n\n      if (key && selectedItemKeyDownHandlers[key]) {\n        selectedItemKeyDownHandlers[key](event);\n      }\n    };\n\n    return {\n      [refKey]: handleRefs(ref, selectedItemNode => {\n        if (selectedItemNode) {\n          selectedItemRefs.current.push(selectedItemNode);\n        }\n      }),\n      tabIndex: index === latestState.activeIndex ? 0 : -1,\n      onClick: callAllEventHandlers(onClick, selectedItemHandleClick),\n      onKeyDown: callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown),\n      ...rest\n    };\n  }, [dispatch, latest, selectedItemKeyDownHandlers]);\n  const getDropdownProps = useCallback(function (_temp2, _temp3) {\n    let {\n      refKey = 'ref',\n      ref,\n      onKeyDown,\n      onClick,\n      preventKeyAction = false,\n      ...rest\n    } = _temp2 === void 0 ? {} : _temp2;\n    let {\n      suppressRefError = false\n    } = _temp3 === void 0 ? {} : _temp3;\n    setGetterPropCallInfo('getDropdownProps', suppressRefError, refKey, dropdownRef);\n\n    const dropdownHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n\n      if (key && dropdownKeyDownHandlers[key]) {\n        dropdownKeyDownHandlers[key](event);\n      }\n    };\n\n    const dropdownHandleClick = () => {\n      dispatch({\n        type: DropdownClick\n      });\n    };\n\n    return {\n      [refKey]: handleRefs(ref, dropdownNode => {\n        if (dropdownNode) {\n          dropdownRef.current = dropdownNode;\n        }\n      }),\n      ...(!preventKeyAction && {\n        onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n        onClick: callAllEventHandlers(onClick, dropdownHandleClick)\n      }),\n      ...rest\n    };\n  }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]); // returns\n\n  const addSelectedItem = useCallback(selectedItem => {\n    dispatch({\n      type: FunctionAddSelectedItem,\n      selectedItem\n    });\n  }, [dispatch]);\n  const removeSelectedItem = useCallback(selectedItem => {\n    dispatch({\n      type: FunctionRemoveSelectedItem,\n      selectedItem\n    });\n  }, [dispatch]);\n  const setSelectedItems = useCallback(newSelectedItems => {\n    dispatch({\n      type: FunctionSetSelectedItems,\n      selectedItems: newSelectedItems\n    });\n  }, [dispatch]);\n  const setActiveIndex = useCallback(newActiveIndex => {\n    dispatch({\n      type: FunctionSetActiveIndex,\n      activeIndex: newActiveIndex\n    });\n  }, [dispatch]);\n  const reset = useCallback(() => {\n    dispatch({\n      type: FunctionReset\n    });\n  }, [dispatch]);\n  return {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    setSelectedItems,\n    setActiveIndex,\n    reset,\n    selectedItems,\n    activeIndex\n  };\n}\n\nexport { Downshift$1 as default, resetIdCounter, useCombobox, useMultipleSelection, useSelect };","map":{"version":3,"names":["PropTypes","Component","cloneElement","useRef","useEffect","useCallback","useLayoutEffect","useReducer","useMemo","isForwardRef","computeScrollIntoView","__assign","idCounter","cbToCb","cb","noop","scrollIntoView","node","menuNode","actions","boundary","block","scrollMode","forEach","_ref","el","top","left","scrollTop","scrollLeft","isOrContainsNode","parent","child","environment","result","Node","contains","debounce","fn","time","timeoutId","cancel","clearTimeout","wrapper","_len","arguments","length","args","Array","_key","setTimeout","callAllEventHandlers","_len2","fns","_key2","event","_len3","_key3","some","preventDownshiftDefault","hasOwnProperty","nativeEvent","handleRefs","_len4","refs","_key4","ref","current","generateId","String","resetIdCounter","getA11yStatusMessage$1","_ref2","isOpen","resultCount","previousResultCount","unwrapArray","arg","defaultValue","isArray","isDOMElement","element","type","getElementProps","props","requiredProp","fnName","propName","console","error","stateKeys","pickState","state","k","getState","Object","keys","reduce","prevState","key","isControlledProp","undefined","normalizeArrowKey","keyCode","indexOf","isPlainObject","obj","prototype","toString","call","getNextWrappingIndex","moveAmount","baseIndex","itemCount","getItemNodeFromIndex","circular","itemsLastIndex","newIndex","nonDisabledNewIndex","getNextNonDisabledIndex","currentElementNode","hasAttribute","index","targetWithinDownshift","target","downshiftElements","checkActiveElement","contextNode","document","activeElement","validateControlledUnchanged","process","env","NODE_ENV","prevProps","nextProps","warningDescription","propKey","cleanupStatus","documentProp","getStatusDiv","textContent","setStatus","status","div","statusDiv","getElementById","createElement","setAttribute","assign","style","border","clip","height","margin","overflow","padding","position","width","body","appendChild","unknown","mouseUp","itemMouseEnter","keyDownArrowUp","keyDownArrowDown","keyDownEscape","keyDownEnter","keyDownHome","keyDownEnd","clickItem","blurInput","changeInput","keyDownSpaceButton","clickButton","blurButton","controlledPropUpdatedSelectedItem","touchEnd","stateChangeTypes$3","freeze","__proto__","Downshift","constructor","_props","_this","id","menuId","labelId","inputId","getItemId","input","items","timeoutIds","internalSetTimeout","filter","i","push","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","defaultIsOpen","selectItem","item","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","hasMoreStateThanType","onStateChange","onSelect","onChange","onUserAction","rootRef","_rootNode","getRootProps","_temp","_temp2","refKey","rest","suppressRefError","called","role","keyDownHandlers","ArrowDown","preventDefault","amount","shiftKey","moveHighlightedIndex","getItemCount","nextHighlightedIndex","ArrowUp","Enter","which","itemNode","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","Home","newHighlightedIndex","End","getToggleButtonProps","_temp3","onClick","onPress","onKeyDown","onKeyUp","onBlur","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","eventHandlers","disabled","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","_temp4","onInput","onChangeText","onChangeKey","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","value","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","_temp5","_temp6","getItemProps","_temp7","onMouseMove","onMouseDown","onSelectKey","customClickHandler","avoidScrolling","clearItems","openMenu","closeMenu","updateStatus","getA11yStatusMessage","highlightedItem","initialHighlightedIndex","_highlightedIndex","initialIsOpen","_isOpen","initialInputValue","_inputValue","initialSelectedItem","_selectedItem","_state","internalClearTimeouts","stateToMerge","scrollHighlightedItemIntoView","componentDidMount","validateGetMenuPropsCalledCorrectly","onMouseUp","contextWithinDownshift","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","addEventListener","cleanup","removeEventListener","shouldScroll","currentHighlightedIndex","prevHighlightedIndex","scrollWhenOpen","scrollWhenNavigating","componentDidUpdate","selectedItemChanged","componentWillUnmount","render","children","validateGetRootPropsCalledCorrectly","Error","defaultProps","warn","prevItem","window","stateChangeTypes","propTypes","func","number","bool","any","string","shape","Downshift$1","_ref3","_ref4","refKeySpecified","isComposite","dropdownDefaultStateValues","callOnChangeProps","action","newState","changes","invokeOnChangeHandler","handler","capitalizeString","s","a","getA11ySelectionMessage","selectionParameters","itemToStringLocal","updateA11yStatus","getA11yMessage","useIsomorphicLayoutEffect","useElementIds","toggleButtonId","elementIdsRef","getItemIndex","isAcceptedCharacterKey","test","slice","toUpperCase","useLatestRef","val","useEnhancedReducer","reducer","initialState","prevStateRef","actionRef","enhancedReducer","dispatch","propsRef","dispatchWithProps","useControlledReducer$1","defaultProps$3","getDefaultValue$1","defaultStateValues","getInitialValue$1","initialValue","getInitialState$2","getHighlightedIndexOnOpen","offset","useMouseAndTouchTracker","downshiftElementRefs","handleBlur","mouseAndTouchTrackersRef","map","useGetterPropsCalledChecker","isInitialMountRef","propKeys","getterPropsCalledRef","acc","propCallInfo","elementRef","setGetterPropCallInfo","useA11yMessageSetter","dependencyArray","isInitialMount","useScrollIntoView","itemRefs","menuElement","scrollIntoViewProp","shouldScrollRef","useControlPropsValidator","prevPropsRef","downshiftCommonReducer","ItemMouseMove","MenuMouseLeave","ToggleButtonClick","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSetHighlightedIndex","FunctionSetInputValue","FunctionReset","getItemIndexByCharacterKey","_a","keysSoFar","lowerCasedKeysSoFar","toLowerCase","offsetIndex","startsWith","propTypes$2","array","isRequired","defaultSelectedItem","onSelectedItemChange","onHighlightedIndexChange","onIsOpenChange","concat","defaultProps$2","validatePropTypes$2","options","caller","checkPropTypes","name","ToggleButtonClick$1","ToggleButtonKeyDownArrowDown","ToggleButtonKeyDownArrowUp","ToggleButtonKeyDownCharacter","ToggleButtonKeyDownEscape","ToggleButtonKeyDownHome","ToggleButtonKeyDownEnd","ToggleButtonKeyDownEnter","ToggleButtonKeyDownSpaceButton","ToggleButtonKeyDownPageUp","ToggleButtonKeyDownPageDown","ToggleButtonBlur","MenuMouseLeave$1","ItemMouseMove$1","ItemClick$1","FunctionToggleMenu$1","FunctionOpenMenu$1","FunctionCloseMenu$1","FunctionSetHighlightedIndex$1","FunctionSelectItem$1","FunctionSetInputValue$1","FunctionReset$2","stateChangeTypes$2","ItemClick","FunctionSelectItem","downshiftSelectReducer","altKey","lowercasedKey","useSelect","userProps","toggleButtonRef","clearTimeoutRef","elementIds","previousResultCountRef","latest","outerDispatch","toggleButtonKeyDownHandlers","PageUp","PageDown","newSelectedItem","setInputValue","newInputValue","labelProps","onMouseLeave","menuHandleMouseLeave","tabIndex","latestState","toggleButtonHandleClick","toggleButtonHandleBlur","toggleButtonHandleKeyDown","toggleProps","toggleButtonNode","itemProp","indexProp","latestProps","itemHandleMouseMove","itemHandleClick","itemProps","InputKeyDownArrowDown","InputKeyDownArrowUp","InputKeyDownEscape","InputKeyDownHome","InputKeyDownEnd","InputKeyDownPageUp","InputKeyDownPageDown","InputKeyDownEnter","InputChange","InputBlur","InputFocus","FunctionReset$1","ControlledPropUpdatedSelectedItem","stateChangeTypes$1","getInitialState$1","defaultInputValue","propTypes$1","useControlledReducer","previousSelectedItemRef","validatePropTypes$1","defaultProps$1","downshiftUseComboboxReducer","useCombobox","inputRef","focusOnOpen","_inputRef$current","itemHandleMouseDown","e","onFocus","inputHandleFocus","inputNode","activeIndex","selectedItems","getInitialValue","getDefaultValue","getInitialState","isKeyDownOperationPermitted","metaKey","ctrlKey","HTMLInputElement","selectionStart","selectionEnd","getA11yRemovalMessage","removedSelectedItem","initialSelectedItems","defaultSelectedItems","initialActiveIndex","defaultActiveIndex","onActiveIndexChange","onSelectedItemsChange","keyNavigationNext","keyNavigationPrevious","validatePropTypes","SelectedItemClick","SelectedItemKeyDownDelete","SelectedItemKeyDownBackspace","SelectedItemKeyDownNavigationNext","SelectedItemKeyDownNavigationPrevious","DropdownKeyDownNavigationPrevious","DropdownKeyDownBackspace","DropdownClick","FunctionAddSelectedItem","FunctionRemoveSelectedItem","FunctionSetSelectedItems","FunctionSetActiveIndex","downshiftMultipleSelectionReducer","newActiveIndex","selectedItemIndex","newSelectedItems","useMultipleSelection","dropdownRef","previousSelectedItemsRef","selectedItemRefs","find","activeSelectedItem","selectedItemKeyDownHandlers","Delete","Backspace","dropdownKeyDownHandlers","getSelectedItemProps","selectedItemHandleClick","selectedItemHandleKeyDown","selectedItemNode","getDropdownProps","preventKeyAction","dropdownHandleKeyDown","dropdownHandleClick","dropdownNode","addSelectedItem","removeSelectedItem","setSelectedItems","setActiveIndex","default"],"sources":["/Users/richie/Desktop/ramp-fe-challenge 2/node_modules/downshift/dist/downshift.esm.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Component, cloneElement, useRef, useEffect, useCallback, useLayoutEffect, useReducer, useMemo } from 'react';\nimport { isForwardRef } from 'react-is';\nimport computeScrollIntoView from 'compute-scroll-into-view';\nimport { __assign } from 'tslib';\n\nlet idCounter = 0;\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop;\n}\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (!node) {\n    return;\n  }\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed'\n  });\n  actions.forEach(_ref => {\n    let {\n      el,\n      top,\n      left\n    } = _ref;\n    el.scrollTop = top;\n    el.scrollLeft = left;\n  });\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @param {Window} environment The window context where downshift renders.\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child, environment) {\n  const result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);\n  return result;\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId;\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  }\n  function wrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    cancel();\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      fn(...args);\n    }, time);\n  }\n  wrapper.cancel = cancel;\n  return wrapper;\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers() {\n  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n  return function (event) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    return fns.some(fn => {\n      if (fn) {\n        fn(event, ...args);\n      }\n      return event.preventDownshiftDefault || event.hasOwnProperty('nativeEvent') && event.nativeEvent.preventDownshiftDefault;\n    });\n  };\n}\nfunction handleRefs() {\n  for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    refs[_key4] = arguments[_key4];\n  }\n  return node => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  };\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++);\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0;\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specify if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage$1(_ref2) {\n  let {\n    isOpen,\n    resultCount,\n    previousResultCount\n  } = _ref2;\n  if (!isOpen) {\n    return '';\n  }\n  if (!resultCount) {\n    return 'No results are available.';\n  }\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${resultCount === 1 ? ' is' : 's are'} available, use up and down arrow keys to navigate. Press Enter key to select.`;\n  }\n  return '';\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */arg[0] : arg;\n  if (!arg && defaultValue) {\n    return defaultValue;\n  } else {\n    return arg;\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n\n  // then we assume this is react\n  return typeof element.type === 'string';\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  return element.props;\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`);\n}\nconst stateKeys = ['highlightedIndex', 'inputValue', 'isOpen', 'selectedItem', 'type'];\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state) {\n  if (state === void 0) {\n    state = {};\n  }\n  const result = {};\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k];\n    }\n  });\n  return result;\n}\n\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\nfunction getState(state, props) {\n  return Object.keys(state).reduce((prevState, key) => {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key];\n    return prevState;\n  }, {});\n}\n\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {\n    key,\n    keyCode\n  } = event;\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`;\n  }\n  return key;\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]';\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  if (circular === void 0) {\n    circular = true;\n  }\n  if (itemCount === 0) {\n    return -1;\n  }\n  const itemsLastIndex = itemCount - 1;\n  if (typeof baseIndex !== 'number' || baseIndex < 0 || baseIndex >= itemCount) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;\n  }\n  let newIndex = baseIndex + moveAmount;\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0;\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex;\n  }\n  const nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);\n  if (nonDisabledNewIndex === -1) {\n    return baseIndex >= itemCount ? -1 : baseIndex;\n  }\n  return nonDisabledNewIndex;\n}\n\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\nfunction getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {\n  const currentElementNode = getItemNodeFromIndex(baseIndex);\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex;\n  }\n  if (moveAmount > 0) {\n    for (let index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index;\n      }\n    }\n  } else {\n    for (let index = baseIndex - 1; index >= 0; index--) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index;\n      }\n    }\n  }\n  if (circular) {\n    return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);\n  }\n  return -1;\n}\n\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Window} environment The window context where downshift renders.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\nfunction targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {\n  if (checkActiveElement === void 0) {\n    checkActiveElement = true;\n  }\n  return downshiftElements.some(contextNode => contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment)));\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet validateControlledUnchanged = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validateControlledUnchanged = (state, prevProps, nextProps) => {\n    const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`;\n    Object.keys(state).forEach(propKey => {\n      if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {\n        // eslint-disable-next-line no-console\n        console.error(`downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`);\n      } else if (prevProps[propKey] === undefined && nextProps[propKey] !== undefined) {\n        // eslint-disable-next-line no-console\n        console.error(`downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`);\n      }\n    });\n  };\n}\n\nconst cleanupStatus = debounce(documentProp => {\n  getStatusDiv(documentProp).textContent = '';\n}, 500);\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  const div = getStatusDiv(documentProp);\n  if (!status) {\n    return;\n  }\n  div.textContent = status;\n  cleanupStatus(documentProp);\n}\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp) {\n  if (documentProp === void 0) {\n    documentProp = document;\n  }\n  let statusDiv = documentProp.getElementById('a11y-status-message');\n  if (statusDiv) {\n    return statusDiv;\n  }\n  statusDiv = documentProp.createElement('div');\n  statusDiv.setAttribute('id', 'a11y-status-message');\n  statusDiv.setAttribute('role', 'status');\n  statusDiv.setAttribute('aria-live', 'polite');\n  statusDiv.setAttribute('aria-relevant', 'additions text');\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px'\n  });\n  documentProp.body.appendChild(statusDiv);\n  return statusDiv;\n}\n\nconst unknown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_unknown__' : 0;\nconst mouseUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_mouseup__' : 1;\nconst itemMouseEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_item_mouseenter__' : 2;\nconst keyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_up__' : 3;\nconst keyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_arrow_down__' : 4;\nconst keyDownEscape = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_escape__' : 5;\nconst keyDownEnter = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_enter__' : 6;\nconst keyDownHome = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_home__' : 7;\nconst keyDownEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_end__' : 8;\nconst clickItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_item__' : 9;\nconst blurInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_input__' : 10;\nconst changeInput = process.env.NODE_ENV !== \"production\" ? '__autocomplete_change_input__' : 11;\nconst keyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_keydown_space_button__' : 12;\nconst clickButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_click_button__' : 13;\nconst blurButton = process.env.NODE_ENV !== \"production\" ? '__autocomplete_blur_button__' : 14;\nconst controlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__autocomplete_controlled_prop_updated_selected_item__' : 15;\nconst touchEnd = process.env.NODE_ENV !== \"production\" ? '__autocomplete_touchend__' : 16;\n\nvar stateChangeTypes$3 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  unknown: unknown,\n  mouseUp: mouseUp,\n  itemMouseEnter: itemMouseEnter,\n  keyDownArrowUp: keyDownArrowUp,\n  keyDownArrowDown: keyDownArrowDown,\n  keyDownEscape: keyDownEscape,\n  keyDownEnter: keyDownEnter,\n  keyDownHome: keyDownHome,\n  keyDownEnd: keyDownEnd,\n  clickItem: clickItem,\n  blurInput: blurInput,\n  changeInput: changeInput,\n  keyDownSpaceButton: keyDownSpaceButton,\n  clickButton: clickButton,\n  blurButton: blurButton,\n  controlledPropUpdatedSelectedItem: controlledPropUpdatedSelectedItem,\n  touchEnd: touchEnd\n});\n\n/* eslint camelcase:0 */\nconst Downshift = /*#__PURE__*/(() => {\n  class Downshift extends Component {\n    constructor(_props) {\n      var _this;\n      super(_props);\n      _this = this;\n      this.id = this.props.id || `downshift-${generateId()}`;\n      this.menuId = this.props.menuId || `${this.id}-menu`;\n      this.labelId = this.props.labelId || `${this.id}-label`;\n      this.inputId = this.props.inputId || `${this.id}-input`;\n      this.getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`);\n      this.input = null;\n      this.items = [];\n      this.itemCount = null;\n      this.previousResultCount = 0;\n      this.timeoutIds = [];\n      this.internalSetTimeout = (fn, time) => {\n        const id = setTimeout(() => {\n          this.timeoutIds = this.timeoutIds.filter(i => i !== id);\n          fn();\n        }, time);\n        this.timeoutIds.push(id);\n      };\n      this.setItemCount = count => {\n        this.itemCount = count;\n      };\n      this.unsetItemCount = () => {\n        this.itemCount = null;\n      };\n      this.setHighlightedIndex = function (highlightedIndex, otherStateToSet) {\n        if (highlightedIndex === void 0) {\n          highlightedIndex = _this.props.defaultHighlightedIndex;\n        }\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState({\n          highlightedIndex,\n          ...otherStateToSet\n        });\n      };\n      this.clearSelection = cb => {\n        this.internalSetState({\n          selectedItem: null,\n          inputValue: '',\n          highlightedIndex: this.props.defaultHighlightedIndex,\n          isOpen: this.props.defaultIsOpen\n        }, cb);\n      };\n      this.selectItem = (item, otherStateToSet, cb) => {\n        otherStateToSet = pickState(otherStateToSet);\n        this.internalSetState({\n          isOpen: this.props.defaultIsOpen,\n          highlightedIndex: this.props.defaultHighlightedIndex,\n          selectedItem: item,\n          inputValue: this.props.itemToString(item),\n          ...otherStateToSet\n        }, cb);\n      };\n      this.selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n        const item = this.items[itemIndex];\n        if (item == null) {\n          return;\n        }\n        this.selectItem(item, otherStateToSet, cb);\n      };\n      this.selectHighlightedItem = (otherStateToSet, cb) => {\n        return this.selectItemAtIndex(this.getState().highlightedIndex, otherStateToSet, cb);\n      };\n      this.internalSetState = (stateToSet, cb) => {\n        let isItemSelected, onChangeArg;\n        const onStateChangeArg = {};\n        const isStateToSetFunction = typeof stateToSet === 'function';\n\n        // we want to call `onInputValueChange` before the `setState` call\n        // so someone controlling the `inputValue` state gets notified of\n        // the input change as soon as possible. This avoids issues with\n        // preserving the cursor position.\n        // See https://github.com/downshift-js/downshift/issues/217 for more info.\n        if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n          this.props.onInputValueChange(stateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...stateToSet\n          });\n        }\n        return this.setState(state => {\n          state = this.getState(state);\n          let newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;\n\n          // Your own function that could modify the state that will be set.\n          newStateToSet = this.props.stateReducer(state, newStateToSet);\n\n          // checks if an item is selected, regardless of if it's different from\n          // what was selected before\n          // used to determine if onSelect and onChange callbacks should be called\n          isItemSelected = newStateToSet.hasOwnProperty('selectedItem');\n          // this keeps track of the object we want to call with setState\n          const nextState = {};\n          // we need to call on change if the outside world is controlling any of our state\n          // and we're trying to update that state. OR if the selection has changed and we're\n          // trying to update the selection\n          if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {\n            onChangeArg = newStateToSet.selectedItem;\n          }\n          newStateToSet.type = newStateToSet.type || unknown;\n          Object.keys(newStateToSet).forEach(key => {\n            // onStateChangeArg should only have the state that is\n            // actually changing\n            if (state[key] !== newStateToSet[key]) {\n              onStateChangeArg[key] = newStateToSet[key];\n            }\n            // the type is useful for the onStateChangeArg\n            // but we don't actually want to set it in internal state.\n            // this is an undocumented feature for now... Not all internalSetState\n            // calls support it and I'm not certain we want them to yet.\n            // But it enables users controlling the isOpen state to know when\n            // the isOpen state changes due to mouseup events which is quite handy.\n            if (key === 'type') {\n              return;\n            }\n            newStateToSet[key];\n            // if it's coming from props, then we don't care to set it internally\n            if (!isControlledProp(this.props, key)) {\n              nextState[key] = newStateToSet[key];\n            }\n          });\n\n          // if stateToSet is a function, then we weren't able to call onInputValueChange\n          // earlier, so we'll call it now that we know what the inputValue state will be.\n          if (isStateToSetFunction && newStateToSet.hasOwnProperty('inputValue')) {\n            this.props.onInputValueChange(newStateToSet.inputValue, {\n              ...this.getStateAndHelpers(),\n              ...newStateToSet\n            });\n          }\n          return nextState;\n        }, () => {\n          // call the provided callback if it's a function\n          cbToCb(cb)();\n\n          // only call the onStateChange and onChange callbacks if\n          // we have relevant information to pass them.\n          const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;\n          if (hasMoreStateThanType) {\n            this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers());\n          }\n          if (isItemSelected) {\n            this.props.onSelect(stateToSet.selectedItem, this.getStateAndHelpers());\n          }\n          if (onChangeArg !== undefined) {\n            this.props.onChange(onChangeArg, this.getStateAndHelpers());\n          }\n          // this is currently undocumented and therefore subject to change\n          // We'll try to not break it, but just be warned.\n          this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers());\n        });\n      };\n      this.rootRef = node => this._rootNode = node;\n      this.getRootProps = function (_temp, _temp2) {\n        let {\n          refKey = 'ref',\n          ref,\n          ...rest\n        } = _temp === void 0 ? {} : _temp;\n        let {\n          suppressRefError = false\n        } = _temp2 === void 0 ? {} : _temp2;\n        // this is used in the render to know whether the user has called getRootProps.\n        // It uses that to know whether to apply the props automatically\n        _this.getRootProps.called = true;\n        _this.getRootProps.refKey = refKey;\n        _this.getRootProps.suppressRefError = suppressRefError;\n        const {\n          isOpen\n        } = _this.getState();\n        return {\n          [refKey]: handleRefs(ref, _this.rootRef),\n          role: 'combobox',\n          'aria-expanded': isOpen,\n          'aria-haspopup': 'listbox',\n          'aria-owns': isOpen ? _this.menuId : null,\n          'aria-labelledby': _this.labelId,\n          ...rest\n        };\n      };\n      this.keyDownHandlers = {\n        ArrowDown(event) {\n          event.preventDefault();\n          if (this.getState().isOpen) {\n            const amount = event.shiftKey ? 5 : 1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowDown\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowDown\n            }, () => {\n              const itemCount = this.getItemCount();\n              if (itemCount > 0) {\n                const {\n                  highlightedIndex\n                } = this.getState();\n                const nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, index => this.getItemNodeFromIndex(index));\n                this.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowDown\n                });\n              }\n            });\n          }\n        },\n        ArrowUp(event) {\n          event.preventDefault();\n          if (this.getState().isOpen) {\n            const amount = event.shiftKey ? -5 : -1;\n            this.moveHighlightedIndex(amount, {\n              type: keyDownArrowUp\n            });\n          } else {\n            this.internalSetState({\n              isOpen: true,\n              type: keyDownArrowUp\n            }, () => {\n              const itemCount = this.getItemCount();\n              if (itemCount > 0) {\n                const {\n                  highlightedIndex\n                } = this.getState();\n                const nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, index => this.getItemNodeFromIndex(index));\n                this.setHighlightedIndex(nextHighlightedIndex, {\n                  type: keyDownArrowUp\n                });\n              }\n            });\n          }\n        },\n        Enter(event) {\n          if (event.which === 229) {\n            return;\n          }\n          const {\n            isOpen,\n            highlightedIndex\n          } = this.getState();\n          if (isOpen && highlightedIndex != null) {\n            event.preventDefault();\n            const item = this.items[highlightedIndex];\n            const itemNode = this.getItemNodeFromIndex(highlightedIndex);\n            if (item == null || itemNode && itemNode.hasAttribute('disabled')) {\n              return;\n            }\n            this.selectHighlightedItem({\n              type: keyDownEnter\n            });\n          }\n        },\n        Escape(event) {\n          event.preventDefault();\n          this.reset({\n            type: keyDownEscape,\n            ...(!this.state.isOpen && {\n              selectedItem: null,\n              inputValue: ''\n            })\n          });\n        }\n      };\n      this.buttonKeyDownHandlers = {\n        ...this.keyDownHandlers,\n        ' '(event) {\n          event.preventDefault();\n          this.toggleMenu({\n            type: keyDownSpaceButton\n          });\n        }\n      };\n      this.inputKeyDownHandlers = {\n        ...this.keyDownHandlers,\n        Home(event) {\n          const {\n            isOpen\n          } = this.getState();\n          if (!isOpen) {\n            return;\n          }\n          event.preventDefault();\n          const itemCount = this.getItemCount();\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          }\n\n          // get next non-disabled starting downwards from 0 if that's disabled.\n          const newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, index => this.getItemNodeFromIndex(index), false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownHome\n          });\n        },\n        End(event) {\n          const {\n            isOpen\n          } = this.getState();\n          if (!isOpen) {\n            return;\n          }\n          event.preventDefault();\n          const itemCount = this.getItemCount();\n          if (itemCount <= 0 || !isOpen) {\n            return;\n          }\n\n          // get next non-disabled starting upwards from last index if that's disabled.\n          const newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, index => this.getItemNodeFromIndex(index), false);\n          this.setHighlightedIndex(newHighlightedIndex, {\n            type: keyDownEnd\n          });\n        }\n      };\n      this.getToggleButtonProps = function (_temp3) {\n        let {\n          onClick,\n          onPress,\n          onKeyDown,\n          onKeyUp,\n          onBlur,\n          ...rest\n        } = _temp3 === void 0 ? {} : _temp3;\n        const {\n          isOpen\n        } = _this.getState();\n        const enabledEventHandlers = {\n          onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)\n        };\n        const eventHandlers = rest.disabled ? {} : enabledEventHandlers;\n        return {\n          type: 'button',\n          role: 'button',\n          'aria-label': isOpen ? 'close menu' : 'open menu',\n          'aria-haspopup': true,\n          'data-toggle': true,\n          ...eventHandlers,\n          ...rest\n        };\n      };\n      this.buttonHandleKeyUp = event => {\n        // Prevent click event from emitting in Firefox\n        event.preventDefault();\n      };\n      this.buttonHandleKeyDown = event => {\n        const key = normalizeArrowKey(event);\n        if (this.buttonKeyDownHandlers[key]) {\n          this.buttonKeyDownHandlers[key].call(this, event);\n        }\n      };\n      this.buttonHandleClick = event => {\n        event.preventDefault();\n        // handle odd case for Safari and Firefox which\n        // don't give the button the focus properly.\n        /* istanbul ignore if (can't reasonably test this) */\n        if (this.props.environment.document.activeElement === this.props.environment.document.body) {\n          event.target.focus();\n        }\n        // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n        // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n        // when building for production and should therefore have no impact on production code.\n        if (process.env.NODE_ENV === 'test') {\n          this.toggleMenu({\n            type: clickButton\n          });\n        } else {\n          // Ensure that toggle of menu occurs after the potential blur event in iOS\n          this.internalSetTimeout(() => this.toggleMenu({\n            type: clickButton\n          }));\n        }\n      };\n      this.buttonHandleBlur = event => {\n        const blurTarget = event.target; // Save blur target for comparison with activeElement later\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n        this.internalSetTimeout(() => {\n          if (!this.isMouseDown && (this.props.environment.document.activeElement == null || this.props.environment.document.activeElement.id !== this.inputId) && this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n          ) {\n            this.reset({\n              type: blurButton\n            });\n          }\n        });\n      };\n      this.getLabelProps = props => {\n        return {\n          htmlFor: this.inputId,\n          id: this.labelId,\n          ...props\n        };\n      };\n      this.getInputProps = function (_temp4) {\n        let {\n          onKeyDown,\n          onBlur,\n          onChange,\n          onInput,\n          onChangeText,\n          ...rest\n        } = _temp4 === void 0 ? {} : _temp4;\n        let onChangeKey;\n        let eventHandlers = {};\n\n        /* istanbul ignore next (preact) */\n        {\n          onChangeKey = 'onChange';\n        }\n        const {\n          inputValue,\n          isOpen,\n          highlightedIndex\n        } = _this.getState();\n        if (!rest.disabled) {\n          eventHandlers = {\n            [onChangeKey]: callAllEventHandlers(onChange, onInput, _this.inputHandleChange),\n            onKeyDown: callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown),\n            onBlur: callAllEventHandlers(onBlur, _this.inputHandleBlur)\n          };\n        }\n        return {\n          'aria-autocomplete': 'list',\n          'aria-activedescendant': isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,\n          'aria-controls': isOpen ? _this.menuId : null,\n          'aria-labelledby': _this.labelId,\n          // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n          // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n          autoComplete: 'off',\n          value: inputValue,\n          id: _this.inputId,\n          ...eventHandlers,\n          ...rest\n        };\n      };\n      this.inputHandleKeyDown = event => {\n        const key = normalizeArrowKey(event);\n        if (key && this.inputKeyDownHandlers[key]) {\n          this.inputKeyDownHandlers[key].call(this, event);\n        }\n      };\n      this.inputHandleChange = event => {\n        this.internalSetState({\n          type: changeInput,\n          isOpen: true,\n          inputValue: event.target.value,\n          highlightedIndex: this.props.defaultHighlightedIndex\n        });\n      };\n      this.inputHandleBlur = () => {\n        // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n        this.internalSetTimeout(() => {\n          const downshiftButtonIsActive = this.props.environment.document && !!this.props.environment.document.activeElement && !!this.props.environment.document.activeElement.dataset && this.props.environment.document.activeElement.dataset.toggle && this._rootNode && this._rootNode.contains(this.props.environment.document.activeElement);\n          if (!this.isMouseDown && !downshiftButtonIsActive) {\n            this.reset({\n              type: blurInput\n            });\n          }\n        });\n      };\n      this.menuRef = node => {\n        this._menuNode = node;\n      };\n      this.getMenuProps = function (_temp5, _temp6) {\n        let {\n          refKey = 'ref',\n          ref,\n          ...props\n        } = _temp5 === void 0 ? {} : _temp5;\n        let {\n          suppressRefError = false\n        } = _temp6 === void 0 ? {} : _temp6;\n        _this.getMenuProps.called = true;\n        _this.getMenuProps.refKey = refKey;\n        _this.getMenuProps.suppressRefError = suppressRefError;\n        return {\n          [refKey]: handleRefs(ref, _this.menuRef),\n          role: 'listbox',\n          'aria-labelledby': props && props['aria-label'] ? null : _this.labelId,\n          id: _this.menuId,\n          ...props\n        };\n      };\n      this.getItemProps = function (_temp7) {\n        let {\n          onMouseMove,\n          onMouseDown,\n          onClick,\n          onPress,\n          index,\n          item = process.env.NODE_ENV === 'production' ? /* istanbul ignore next */undefined : requiredProp('getItemProps', 'item'),\n          ...rest\n        } = _temp7 === void 0 ? {} : _temp7;\n        if (index === undefined) {\n          _this.items.push(item);\n          index = _this.items.indexOf(item);\n        } else {\n          _this.items[index] = item;\n        }\n        const onSelectKey = 'onClick';\n        const customClickHandler = onClick;\n        const enabledEventHandlers = {\n          // onMouseMove is used over onMouseEnter here. onMouseMove\n          // is only triggered on actual mouse movement while onMouseEnter\n          // can fire on DOM changes, interrupting keyboard navigation\n          onMouseMove: callAllEventHandlers(onMouseMove, () => {\n            if (index === _this.getState().highlightedIndex) {\n              return;\n            }\n            _this.setHighlightedIndex(index, {\n              type: itemMouseEnter\n            });\n\n            // We never want to manually scroll when changing state based\n            // on `onMouseMove` because we will be moving the element out\n            // from under the user which is currently scrolling/moving the\n            // cursor\n            _this.avoidScrolling = true;\n            _this.internalSetTimeout(() => _this.avoidScrolling = false, 250);\n          }),\n          onMouseDown: callAllEventHandlers(onMouseDown, event => {\n            // This prevents the activeElement from being changed\n            // to the item so it can remain with the current activeElement\n            // which is a more common use case.\n            event.preventDefault();\n          }),\n          [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n            _this.selectItemAtIndex(index, {\n              type: clickItem\n            });\n          })\n        };\n\n        // Passing down the onMouseDown handler to prevent redirect\n        // of the activeElement if clicking on disabled items\n        const eventHandlers = rest.disabled ? {\n          onMouseDown: enabledEventHandlers.onMouseDown\n        } : enabledEventHandlers;\n        return {\n          id: _this.getItemId(index),\n          role: 'option',\n          'aria-selected': _this.getState().highlightedIndex === index,\n          ...eventHandlers,\n          ...rest\n        };\n      };\n      this.clearItems = () => {\n        this.items = [];\n      };\n      this.reset = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(_ref => {\n          let {\n            selectedItem\n          } = _ref;\n          return {\n            isOpen: _this.props.defaultIsOpen,\n            highlightedIndex: _this.props.defaultHighlightedIndex,\n            inputValue: _this.props.itemToString(selectedItem),\n            ...otherStateToSet\n          };\n        }, cb);\n      };\n      this.toggleMenu = function (otherStateToSet, cb) {\n        if (otherStateToSet === void 0) {\n          otherStateToSet = {};\n        }\n        otherStateToSet = pickState(otherStateToSet);\n        _this.internalSetState(_ref2 => {\n          let {\n            isOpen\n          } = _ref2;\n          return {\n            isOpen: !isOpen,\n            ...(isOpen && {\n              highlightedIndex: _this.props.defaultHighlightedIndex\n            }),\n            ...otherStateToSet\n          };\n        }, () => {\n          const {\n            isOpen,\n            highlightedIndex\n          } = _this.getState();\n          if (isOpen) {\n            if (_this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n              _this.setHighlightedIndex(highlightedIndex, otherStateToSet);\n            }\n          }\n          cbToCb(cb)();\n        });\n      };\n      this.openMenu = cb => {\n        this.internalSetState({\n          isOpen: true\n        }, cb);\n      };\n      this.closeMenu = cb => {\n        this.internalSetState({\n          isOpen: false\n        }, cb);\n      };\n      this.updateStatus = debounce(() => {\n        const state = this.getState();\n        const item = this.items[state.highlightedIndex];\n        const resultCount = this.getItemCount();\n        const status = this.props.getA11yStatusMessage({\n          itemToString: this.props.itemToString,\n          previousResultCount: this.previousResultCount,\n          resultCount,\n          highlightedItem: item,\n          ...state\n        });\n        this.previousResultCount = resultCount;\n        setStatus(status, this.props.environment.document);\n      }, 200);\n      // fancy destructuring + defaults + aliases\n      // this basically says each value of state should either be set to\n      // the initial value or the default value if the initial value is not provided\n      const {\n        defaultHighlightedIndex,\n        initialHighlightedIndex: _highlightedIndex = defaultHighlightedIndex,\n        defaultIsOpen,\n        initialIsOpen: _isOpen = defaultIsOpen,\n        initialInputValue: _inputValue = '',\n        initialSelectedItem: _selectedItem = null\n      } = this.props;\n      const _state = this.getState({\n        highlightedIndex: _highlightedIndex,\n        isOpen: _isOpen,\n        inputValue: _inputValue,\n        selectedItem: _selectedItem\n      });\n      if (_state.selectedItem != null && this.props.initialInputValue === undefined) {\n        _state.inputValue = this.props.itemToString(_state.selectedItem);\n      }\n      this.state = _state;\n    }\n    /**\n     * Clear all running timeouts\n     */\n    internalClearTimeouts() {\n      this.timeoutIds.forEach(id => {\n        clearTimeout(id);\n      });\n      this.timeoutIds = [];\n    }\n\n    /**\n     * Gets the state based on internal state or props\n     * If a state value is passed via props, then that\n     * is the value given, otherwise it's retrieved from\n     * stateToMerge\n     *\n     * @param {Object} stateToMerge defaults to this.state\n     * @return {Object} the state\n     */\n    getState(stateToMerge) {\n      if (stateToMerge === void 0) {\n        stateToMerge = this.state;\n      }\n      return getState(stateToMerge, this.props);\n    }\n    getItemCount() {\n      // things read better this way. They're in priority order:\n      // 1. `this.itemCount`\n      // 2. `this.props.itemCount`\n      // 3. `this.items.length`\n      let itemCount = this.items.length;\n      if (this.itemCount != null) {\n        itemCount = this.itemCount;\n      } else if (this.props.itemCount !== undefined) {\n        itemCount = this.props.itemCount;\n      }\n      return itemCount;\n    }\n    getItemNodeFromIndex(index) {\n      return this.props.environment.document.getElementById(this.getItemId(index));\n    }\n    scrollHighlightedItemIntoView() {\n      /* istanbul ignore else (react-native) */\n      {\n        const node = this.getItemNodeFromIndex(this.getState().highlightedIndex);\n        this.props.scrollIntoView(node, this._menuNode);\n      }\n    }\n    moveHighlightedIndex(amount, otherStateToSet) {\n      const itemCount = this.getItemCount();\n      const {\n        highlightedIndex\n      } = this.getState();\n      if (itemCount > 0) {\n        const nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, index => this.getItemNodeFromIndex(index));\n        this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);\n      }\n    }\n    getStateAndHelpers() {\n      const {\n        highlightedIndex,\n        inputValue,\n        selectedItem,\n        isOpen\n      } = this.getState();\n      const {\n        itemToString\n      } = this.props;\n      const {\n        id\n      } = this;\n      const {\n        getRootProps,\n        getToggleButtonProps,\n        getLabelProps,\n        getMenuProps,\n        getInputProps,\n        getItemProps,\n        openMenu,\n        closeMenu,\n        toggleMenu,\n        selectItem,\n        selectItemAtIndex,\n        selectHighlightedItem,\n        setHighlightedIndex,\n        clearSelection,\n        clearItems,\n        reset,\n        setItemCount,\n        unsetItemCount,\n        internalSetState: setState\n      } = this;\n      return {\n        // prop getters\n        getRootProps,\n        getToggleButtonProps,\n        getLabelProps,\n        getMenuProps,\n        getInputProps,\n        getItemProps,\n        // actions\n        reset,\n        openMenu,\n        closeMenu,\n        toggleMenu,\n        selectItem,\n        selectItemAtIndex,\n        selectHighlightedItem,\n        setHighlightedIndex,\n        clearSelection,\n        clearItems,\n        setItemCount,\n        unsetItemCount,\n        setState,\n        // props\n        itemToString,\n        // derived\n        id,\n        // state\n        highlightedIndex,\n        inputValue,\n        isOpen,\n        selectedItem\n      };\n    }\n\n    //////////////////////////// ROOT\n\n    componentDidMount() {\n      /* istanbul ignore if (react-native) */\n      if (process.env.NODE_ENV !== 'production' && !false && this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n      }\n\n      /* istanbul ignore if (react-native) */\n      {\n        // this.isMouseDown helps us track whether the mouse is currently held down.\n        // This is useful when the user clicks on an item in the list, but holds the mouse\n        // down long enough for the list to disappear (because the blur event fires on the input)\n        // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n        // trigger hiding the menu.\n        const onMouseDown = () => {\n          this.isMouseDown = true;\n        };\n        const onMouseUp = event => {\n          this.isMouseDown = false;\n          // if the target element or the activeElement is within a downshift node\n          // then we don't want to reset downshift\n          const contextWithinDownshift = targetWithinDownshift(event.target, [this._rootNode, this._menuNode], this.props.environment);\n          if (!contextWithinDownshift && this.getState().isOpen) {\n            this.reset({\n              type: mouseUp\n            }, () => this.props.onOuterClick(this.getStateAndHelpers()));\n          }\n        };\n        // Touching an element in iOS gives focus and hover states, but touching out of\n        // the element will remove hover, and persist the focus state, resulting in the\n        // blur event not being triggered.\n        // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n        // If the user taps outside of Downshift, the component should be reset,\n        // but not if the user is swiping\n        const onTouchStart = () => {\n          this.isTouchMove = false;\n        };\n        const onTouchMove = () => {\n          this.isTouchMove = true;\n        };\n        const onTouchEnd = event => {\n          const contextWithinDownshift = targetWithinDownshift(event.target, [this._rootNode, this._menuNode], this.props.environment, false);\n          if (!this.isTouchMove && !contextWithinDownshift && this.getState().isOpen) {\n            this.reset({\n              type: touchEnd\n            }, () => this.props.onOuterClick(this.getStateAndHelpers()));\n          }\n        };\n        const {\n          environment\n        } = this.props;\n        environment.addEventListener('mousedown', onMouseDown);\n        environment.addEventListener('mouseup', onMouseUp);\n        environment.addEventListener('touchstart', onTouchStart);\n        environment.addEventListener('touchmove', onTouchMove);\n        environment.addEventListener('touchend', onTouchEnd);\n        this.cleanup = () => {\n          this.internalClearTimeouts();\n          this.updateStatus.cancel();\n          environment.removeEventListener('mousedown', onMouseDown);\n          environment.removeEventListener('mouseup', onMouseUp);\n          environment.removeEventListener('touchstart', onTouchStart);\n          environment.removeEventListener('touchmove', onTouchMove);\n          environment.removeEventListener('touchend', onTouchEnd);\n        };\n      }\n    }\n    shouldScroll(prevState, prevProps) {\n      const {\n        highlightedIndex: currentHighlightedIndex\n      } = this.props.highlightedIndex === undefined ? this.getState() : this.props;\n      const {\n        highlightedIndex: prevHighlightedIndex\n      } = prevProps.highlightedIndex === undefined ? prevState : prevProps;\n      const scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;\n      const scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;\n      return scrollWhenOpen || scrollWhenNavigating;\n    }\n    componentDidUpdate(prevProps, prevState) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateControlledUnchanged(this.state, prevProps, this.props);\n        /* istanbul ignore if (react-native) */\n        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {\n          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);\n        }\n      }\n      if (isControlledProp(this.props, 'selectedItem') && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {\n        this.internalSetState({\n          type: controlledPropUpdatedSelectedItem,\n          inputValue: this.props.itemToString(this.props.selectedItem)\n        });\n      }\n      if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n        this.scrollHighlightedItemIntoView();\n      }\n\n      /* istanbul ignore else (react-native) */\n      {\n        this.updateStatus();\n      }\n    }\n    componentWillUnmount() {\n      this.cleanup(); // avoids memory leak\n    }\n\n    render() {\n      const children = unwrapArray(this.props.children, noop);\n      // because the items are rerendered every time we call the children\n      // we clear this out each render and it will be populated again as\n      // getItemProps is called.\n      this.clearItems();\n      // we reset this so we know whether the user calls getRootProps during\n      // this render. If they do then we don't need to do anything,\n      // if they don't then we need to clone the element they return and\n      // apply the props for them.\n      this.getRootProps.called = false;\n      this.getRootProps.refKey = undefined;\n      this.getRootProps.suppressRefError = undefined;\n      // we do something similar for getMenuProps\n      this.getMenuProps.called = false;\n      this.getMenuProps.refKey = undefined;\n      this.getMenuProps.suppressRefError = undefined;\n      // we do something similar for getLabelProps\n      this.getLabelProps.called = false;\n      // and something similar for getInputProps\n      this.getInputProps.called = false;\n      const element = unwrapArray(children(this.getStateAndHelpers()));\n      if (!element) {\n        return null;\n      }\n      if (this.getRootProps.called || this.props.suppressRefError) {\n        if (process.env.NODE_ENV !== 'production' && !this.getRootProps.suppressRefError && !this.props.suppressRefError) {\n          validateGetRootPropsCalledCorrectly(element, this.getRootProps);\n        }\n        return element;\n      } else if (isDOMElement(element)) {\n        // they didn't apply the root props, but we can clone\n        // this and apply the props ourselves\n        return /*#__PURE__*/cloneElement(element, this.getRootProps(getElementProps(element)));\n      }\n\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        // they didn't apply the root props, but they need to\n        // otherwise we can't query around the autocomplete\n\n        throw new Error('downshift: If you return a non-DOM element, you must apply the getRootProps function');\n      }\n\n      /* istanbul ignore next */\n      return undefined;\n    }\n  }\n  Downshift.defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage: getA11yStatusMessage$1,\n    itemToString: i => {\n      if (i == null) {\n        return '';\n      }\n      if (process.env.NODE_ENV !== 'production' && isPlainObject(i) && !i.hasOwnProperty('toString')) {\n        // eslint-disable-next-line no-console\n        console.warn('downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.', 'The object that was passed:', i);\n      }\n      return String(i);\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment: /* istanbul ignore next (ssr) */\n    typeof window === 'undefined' ? {} : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView\n  };\n  Downshift.stateChangeTypes = stateChangeTypes$3;\n  return Downshift;\n})();\nprocess.env.NODE_ENV !== \"production\" ? Downshift.propTypes = {\n  children: PropTypes.func,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultIsOpen: PropTypes.bool,\n  initialHighlightedIndex: PropTypes.number,\n  initialSelectedItem: PropTypes.any,\n  initialInputValue: PropTypes.string,\n  initialIsOpen: PropTypes.bool,\n  getA11yStatusMessage: PropTypes.func,\n  itemToString: PropTypes.func,\n  onChange: PropTypes.func,\n  onSelect: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  onUserAction: PropTypes.func,\n  onOuterClick: PropTypes.func,\n  selectedItemChanged: PropTypes.func,\n  stateReducer: PropTypes.func,\n  itemCount: PropTypes.number,\n  id: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  }),\n  suppressRefError: PropTypes.bool,\n  scrollIntoView: PropTypes.func,\n  // things we keep in state for uncontrolled components\n  // but can accept as props for controlled components\n  /* eslint-disable react/no-unused-prop-types */\n  selectedItem: PropTypes.any,\n  isOpen: PropTypes.bool,\n  inputValue: PropTypes.string,\n  highlightedIndex: PropTypes.number,\n  labelId: PropTypes.string,\n  inputId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func\n  /* eslint-enable react/no-unused-prop-types */\n} : void 0;\nvar Downshift$1 = Downshift;\nfunction validateGetMenuPropsCalledCorrectly(node, _ref3) {\n  let {\n    refKey\n  } = _ref3;\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(`downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`);\n  }\n}\nfunction validateGetRootPropsCalledCorrectly(element, _ref4) {\n  let {\n    refKey\n  } = _ref4;\n  const refKeySpecified = refKey !== 'ref';\n  const isComposite = !isDOMElement(element);\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error('downshift: You returned a non-DOM element. You must specify a refKey in getRootProps');\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(`downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`);\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(`downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`);\n  }\n}\n\nconst dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: ''\n};\nfunction callOnChangeProps(action, state, newState) {\n  const {\n    props,\n    type\n  } = action;\n  const changes = {};\n  Object.keys(state).forEach(key => {\n    invokeOnChangeHandler(key, action, state, newState);\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key];\n    }\n  });\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange({\n      type,\n      ...changes\n    });\n  }\n}\nfunction invokeOnChangeHandler(key, action, state, newState) {\n  const {\n    props,\n    type\n  } = action;\n  const handler = `on${capitalizeString(key)}Change`;\n  if (props[handler] && newState[key] !== undefined && newState[key] !== state[key]) {\n    props[handler]({\n      type,\n      ...newState\n    });\n  }\n}\n\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\nfunction stateReducer(s, a) {\n  return a.changes;\n}\n\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11ySelectionMessage(selectionParameters) {\n  const {\n    selectedItem,\n    itemToString: itemToStringLocal\n  } = selectionParameters;\n  return selectedItem ? `${itemToStringLocal(selectedItem)} has been selected.` : '';\n}\n\n/**\n * Debounced call for updating the a11y message.\n */\nconst updateA11yStatus = debounce((getA11yMessage, document) => {\n  setStatus(getA11yMessage(), document);\n}, 200);\n\n// istanbul ignore next\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect;\nfunction useElementIds(_ref) {\n  let {\n    id = `downshift-${generateId()}`,\n    labelId,\n    menuId,\n    getItemId,\n    toggleButtonId,\n    inputId\n  } = _ref;\n  const elementIdsRef = useRef({\n    labelId: labelId || `${id}-label`,\n    menuId: menuId || `${id}-menu`,\n    getItemId: getItemId || (index => `${id}-item-${index}`),\n    toggleButtonId: toggleButtonId || `${id}-toggle-button`,\n    inputId: inputId || `${id}-input`\n  });\n  return elementIdsRef.current;\n}\nfunction getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index;\n  }\n  if (items.length === 0) {\n    return -1;\n  }\n  return items.indexOf(item);\n}\nfunction itemToString(item) {\n  return item ? String(item) : '';\n}\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key);\n}\nfunction capitalizeString(string) {\n  return `${string.slice(0, 1).toUpperCase()}${string.slice(1)}`;\n}\nfunction useLatestRef(val) {\n  const ref = useRef(val);\n  // technically this is not \"concurrent mode safe\" because we're manipulating\n  // the value during render (so it's not idempotent). However, the places this\n  // hook is used is to support memoizing callbacks which will be called\n  // *during* render, so we need the latest values *during* render.\n  // If not for this, then we'd probably want to use useLayoutEffect instead.\n  ref.current = val;\n  return ref;\n}\n\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useEnhancedReducer(reducer, initialState, props) {\n  const prevStateRef = useRef();\n  const actionRef = useRef();\n  const enhancedReducer = useCallback((state, action) => {\n    actionRef.current = action;\n    state = getState(state, action.props);\n    const changes = reducer(state, action);\n    const newState = action.props.stateReducer(state, {\n      ...action,\n      changes\n    });\n    return newState;\n  }, [reducer]);\n  const [state, dispatch] = useReducer(enhancedReducer, initialState);\n  const propsRef = useLatestRef(props);\n  const dispatchWithProps = useCallback(action => dispatch({\n    props: propsRef.current,\n    ...action\n  }), [propsRef]);\n  const action = actionRef.current;\n  useEffect(() => {\n    if (action && prevStateRef.current && prevStateRef.current !== state) {\n      callOnChangeProps(action, getState(prevStateRef.current, action.props), state);\n    }\n    prevStateRef.current = state;\n  }, [state, props, action]);\n  return [state, dispatchWithProps];\n}\n\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer$1(reducer, initialState, props) {\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props);\n  return [getState(state, props), dispatch];\n}\nconst defaultProps$3 = {\n  itemToString,\n  stateReducer,\n  getA11ySelectionMessage,\n  scrollIntoView,\n  environment: /* istanbul ignore next (ssr) */\n  typeof window === 'undefined' ? {} : window\n};\nfunction getDefaultValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n  const defaultValue = props[`default${capitalizeString(propKey)}`];\n  if (defaultValue !== undefined) {\n    return defaultValue;\n  }\n  return defaultStateValues[propKey];\n}\nfunction getInitialValue$1(props, propKey, defaultStateValues) {\n  if (defaultStateValues === void 0) {\n    defaultStateValues = dropdownDefaultStateValues;\n  }\n  const value = props[propKey];\n  if (value !== undefined) {\n    return value;\n  }\n  const initialValue = props[`initial${capitalizeString(propKey)}`];\n  if (initialValue !== undefined) {\n    return initialValue;\n  }\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\nfunction getInitialState$2(props) {\n  const selectedItem = getInitialValue$1(props, 'selectedItem');\n  const isOpen = getInitialValue$1(props, 'isOpen');\n  const highlightedIndex = getInitialValue$1(props, 'highlightedIndex');\n  const inputValue = getInitialValue$1(props, 'inputValue');\n  return {\n    highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue\n  };\n}\nfunction getHighlightedIndexOnOpen(props, state, offset) {\n  const {\n    items,\n    initialHighlightedIndex,\n    defaultHighlightedIndex\n  } = props;\n  const {\n    selectedItem,\n    highlightedIndex\n  } = state;\n  if (items.length === 0) {\n    return -1;\n  }\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (initialHighlightedIndex !== undefined && highlightedIndex === initialHighlightedIndex) {\n    return initialHighlightedIndex;\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex;\n  }\n  if (selectedItem) {\n    return items.indexOf(selectedItem);\n  }\n  if (offset === 0) {\n    return -1;\n  }\n  return offset < 0 ? items.length - 1 : 0;\n}\n\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\nfunction useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {\n  const mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false\n  });\n  useEffect(() => {\n    // The same strategy for checking if a click occurred inside or outside downsift\n    // as in downshift.js.\n    const onMouseDown = () => {\n      mouseAndTouchTrackersRef.current.isMouseDown = true;\n    };\n    const onMouseUp = event => {\n      mouseAndTouchTrackersRef.current.isMouseDown = false;\n      if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map(ref => ref.current), environment)) {\n        handleBlur();\n      }\n    };\n    const onTouchStart = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = false;\n    };\n    const onTouchMove = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = true;\n    };\n    const onTouchEnd = event => {\n      if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map(ref => ref.current), environment, false)) {\n        handleBlur();\n      }\n    };\n    environment.addEventListener('mousedown', onMouseDown);\n    environment.addEventListener('mouseup', onMouseUp);\n    environment.addEventListener('touchstart', onTouchStart);\n    environment.addEventListener('touchmove', onTouchMove);\n    environment.addEventListener('touchend', onTouchEnd);\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown);\n      environment.removeEventListener('mouseup', onMouseUp);\n      environment.removeEventListener('touchstart', onTouchStart);\n      environment.removeEventListener('touchmove', onTouchMove);\n      environment.removeEventListener('touchend', onTouchEnd);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment]);\n  return mouseAndTouchTrackersRef;\n}\n\n/* istanbul ignore next */\n// eslint-disable-next-line import/no-mutable-exports\nlet useGetterPropsCalledChecker = () => noop;\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useGetterPropsCalledChecker = function () {\n    const isInitialMountRef = useRef(true);\n    for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {\n      propKeys[_key] = arguments[_key];\n    }\n    const getterPropsCalledRef = useRef(propKeys.reduce((acc, propKey) => {\n      acc[propKey] = {};\n      return acc;\n    }, {}));\n    useEffect(() => {\n      Object.keys(getterPropsCalledRef.current).forEach(propKey => {\n        const propCallInfo = getterPropsCalledRef.current[propKey];\n        if (isInitialMountRef.current) {\n          if (!Object.keys(propCallInfo).length) {\n            // eslint-disable-next-line no-console\n            console.error(`downshift: You forgot to call the ${propKey} getter function on your component / element.`);\n            return;\n          }\n        }\n        const {\n          suppressRefError,\n          refKey,\n          elementRef\n        } = propCallInfo;\n        if ((!elementRef || !elementRef.current) && !suppressRefError) {\n          // eslint-disable-next-line no-console\n          console.error(`downshift: The ref prop \"${refKey}\" from ${propKey} was not applied correctly on your element.`);\n        }\n      });\n      isInitialMountRef.current = false;\n    });\n    const setGetterPropCallInfo = useCallback((propKey, suppressRefError, refKey, elementRef) => {\n      getterPropsCalledRef.current[propKey] = {\n        suppressRefError,\n        refKey,\n        elementRef\n      };\n    }, []);\n    return setGetterPropCallInfo;\n  };\n}\nfunction useA11yMessageSetter(getA11yMessage, dependencyArray, _ref2) {\n  let {\n    isInitialMount,\n    highlightedIndex,\n    items,\n    environment,\n    ...rest\n  } = _ref2;\n  // Sets a11y status message on changes in state.\n  useEffect(() => {\n    if (isInitialMount || false) {\n      return;\n    }\n    updateA11yStatus(() => getA11yMessage({\n      highlightedIndex,\n      highlightedItem: items[highlightedIndex],\n      resultCount: items.length,\n      ...rest\n    }), environment.document);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencyArray);\n}\nfunction useScrollIntoView(_ref3) {\n  let {\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    getItemNodeFromIndex,\n    menuElement,\n    scrollIntoView: scrollIntoViewProp\n  } = _ref3;\n  // used not to scroll on highlight by mouse.\n  const shouldScrollRef = useRef(true);\n  // Scroll on highlighted item if change comes from keyboard.\n  useIsomorphicLayoutEffect(() => {\n    if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {\n      return;\n    }\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true;\n    } else {\n      scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex]);\n  return shouldScrollRef;\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet useControlPropsValidator = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  useControlPropsValidator = _ref4 => {\n    let {\n      isInitialMount,\n      props,\n      state\n    } = _ref4;\n    // used for checking when props are moving from controlled to uncontrolled.\n    const prevPropsRef = useRef(props);\n    useEffect(() => {\n      if (isInitialMount) {\n        return;\n      }\n      validateControlledUnchanged(state, prevPropsRef.current, props);\n      prevPropsRef.current = props;\n    }, [state, props, isInitialMount]);\n  };\n}\n\nfunction downshiftCommonReducer(state, action, stateChangeTypes) {\n  const {\n    type,\n    props\n  } = action;\n  let changes;\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.disabled ? -1 : action.index\n      };\n      break;\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1\n      };\n      break;\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex\n      };\n      break;\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        selectedItem: getDefaultValue$1(props, 'selectedItem'),\n        inputValue: getDefaultValue$1(props, 'inputValue')\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n  return {\n    ...state,\n    ...changes\n  };\n}\n/* eslint-enable complexity */\n\nfunction getItemIndexByCharacterKey(_a) {\n    var keysSoFar = _a.keysSoFar, highlightedIndex = _a.highlightedIndex, items = _a.items, itemToString = _a.itemToString, getItemNodeFromIndex = _a.getItemNodeFromIndex;\n    var lowerCasedKeysSoFar = keysSoFar.toLowerCase();\n    for (var index = 0; index < items.length; index++) {\n        var offsetIndex = (index + highlightedIndex + 1) % items.length;\n        var item = items[offsetIndex];\n        if (item !== undefined &&\n            itemToString(item)\n                .toLowerCase()\n                .startsWith(lowerCasedKeysSoFar)) {\n            var element = getItemNodeFromIndex(offsetIndex);\n            if (!(element === null || element === void 0 ? void 0 : element.hasAttribute('disabled'))) {\n                return offsetIndex;\n            }\n        }\n    }\n    return highlightedIndex;\n}\nvar propTypes$2 = {\n    items: PropTypes.array.isRequired,\n    itemToString: PropTypes.func,\n    getA11yStatusMessage: PropTypes.func,\n    getA11ySelectionMessage: PropTypes.func,\n    highlightedIndex: PropTypes.number,\n    defaultHighlightedIndex: PropTypes.number,\n    initialHighlightedIndex: PropTypes.number,\n    isOpen: PropTypes.bool,\n    defaultIsOpen: PropTypes.bool,\n    initialIsOpen: PropTypes.bool,\n    selectedItem: PropTypes.any,\n    initialSelectedItem: PropTypes.any,\n    defaultSelectedItem: PropTypes.any,\n    id: PropTypes.string,\n    labelId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    toggleButtonId: PropTypes.string,\n    stateReducer: PropTypes.func,\n    onSelectedItemChange: PropTypes.func,\n    onHighlightedIndexChange: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onIsOpenChange: PropTypes.func,\n    environment: PropTypes.shape({\n        addEventListener: PropTypes.func,\n        removeEventListener: PropTypes.func,\n        document: PropTypes.shape({\n            getElementById: PropTypes.func,\n            activeElement: PropTypes.any,\n            body: PropTypes.any\n        })\n    })\n};\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage(_a) {\n    var isOpen = _a.isOpen, resultCount = _a.resultCount, previousResultCount = _a.previousResultCount;\n    if (!isOpen) {\n        return '';\n    }\n    if (!resultCount) {\n        return 'No results are available.';\n    }\n    if (resultCount !== previousResultCount) {\n        return \"\".concat(resultCount, \" result\").concat(resultCount === 1 ? ' is' : 's are', \" available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.\");\n    }\n    return '';\n}\nvar defaultProps$2 = __assign(__assign({}, defaultProps$3), { getA11yStatusMessage: getA11yStatusMessage });\n// eslint-disable-next-line import/no-mutable-exports\nvar validatePropTypes$2 = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n    validatePropTypes$2 = function (options, caller) {\n        PropTypes.checkPropTypes(propTypes$2, options, 'prop', caller.name);\n    };\n}\n\nconst ToggleButtonClick$1 = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 0;\nconst ToggleButtonKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_down__' : 1;\nconst ToggleButtonKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_arrow_up__' : 2;\nconst ToggleButtonKeyDownCharacter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_character__' : 3;\nconst ToggleButtonKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_escape__' : 4;\nconst ToggleButtonKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_home__' : 5;\nconst ToggleButtonKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_end__' : 6;\nconst ToggleButtonKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_enter__' : 7;\nconst ToggleButtonKeyDownSpaceButton = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_space_button__' : 8;\nconst ToggleButtonKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_up__' : 9;\nconst ToggleButtonKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__togglebutton_keydown_page_down__' : 10;\nconst ToggleButtonBlur = process.env.NODE_ENV !== \"production\" ? '__togglebutton_blur__' : 11;\nconst MenuMouseLeave$1 = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 12;\nconst ItemMouseMove$1 = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 13;\nconst ItemClick$1 = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 14;\nconst FunctionToggleMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nconst FunctionOpenMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nconst FunctionCloseMenu$1 = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nconst FunctionSetHighlightedIndex$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nconst FunctionSelectItem$1 = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nconst FunctionSetInputValue$1 = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nconst FunctionReset$2 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\n\nvar stateChangeTypes$2 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ToggleButtonClick: ToggleButtonClick$1,\n  ToggleButtonKeyDownArrowDown: ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp: ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownCharacter: ToggleButtonKeyDownCharacter,\n  ToggleButtonKeyDownEscape: ToggleButtonKeyDownEscape,\n  ToggleButtonKeyDownHome: ToggleButtonKeyDownHome,\n  ToggleButtonKeyDownEnd: ToggleButtonKeyDownEnd,\n  ToggleButtonKeyDownEnter: ToggleButtonKeyDownEnter,\n  ToggleButtonKeyDownSpaceButton: ToggleButtonKeyDownSpaceButton,\n  ToggleButtonKeyDownPageUp: ToggleButtonKeyDownPageUp,\n  ToggleButtonKeyDownPageDown: ToggleButtonKeyDownPageDown,\n  ToggleButtonBlur: ToggleButtonBlur,\n  MenuMouseLeave: MenuMouseLeave$1,\n  ItemMouseMove: ItemMouseMove$1,\n  ItemClick: ItemClick$1,\n  FunctionToggleMenu: FunctionToggleMenu$1,\n  FunctionOpenMenu: FunctionOpenMenu$1,\n  FunctionCloseMenu: FunctionCloseMenu$1,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,\n  FunctionSelectItem: FunctionSelectItem$1,\n  FunctionSetInputValue: FunctionSetInputValue$1,\n  FunctionReset: FunctionReset$2\n});\n\n/* eslint-disable complexity */\nfunction downshiftSelectReducer(state, action) {\n  const {\n    type,\n    props,\n    altKey\n  } = action;\n  let changes;\n  switch (type) {\n    case ItemClick$1:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index]\n      };\n      break;\n    case ToggleButtonKeyDownCharacter:\n      {\n        const lowercasedKey = action.key;\n        const inputValue = `${state.inputValue}${lowercasedKey}`;\n        const prevHighlightedIndex = !state.isOpen && state.selectedItem ? props.items.indexOf(state.selectedItem) : state.highlightedIndex;\n        const highlightedIndex = getItemIndexByCharacterKey({\n          keysSoFar: inputValue,\n          highlightedIndex: prevHighlightedIndex,\n          items: props.items,\n          itemToString: props.itemToString,\n          getItemNodeFromIndex: action.getItemNodeFromIndex\n        });\n        changes = {\n          inputValue,\n          highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n    case ToggleButtonKeyDownArrowDown:\n      {\n        const highlightedIndex = state.isOpen ? getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1);\n        changes = {\n          highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n    case ToggleButtonKeyDownArrowUp:\n      if (state.isOpen && altKey) {\n        changes = {\n          isOpen: getDefaultValue$1(props, 'isOpen'),\n          highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n          ...(state.highlightedIndex >= 0 && {\n            selectedItem: props.items[state.highlightedIndex]\n          })\n        };\n      } else {\n        const highlightedIndex = state.isOpen ? getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false) : getHighlightedIndexOnOpen(props, state, -1);\n        changes = {\n          highlightedIndex,\n          isOpen: true\n        };\n      }\n      break;\n    // only triggered when menu is open.\n    case ToggleButtonKeyDownEnter:\n    case ToggleButtonKeyDownSpaceButton:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex]\n        })\n      };\n      break;\n    case ToggleButtonKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false),\n        isOpen: true\n      };\n      break;\n    case ToggleButtonKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false),\n        isOpen: true\n      };\n      break;\n    case ToggleButtonKeyDownPageUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case ToggleButtonKeyDownPageDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case ToggleButtonKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1\n      };\n      break;\n    case ToggleButtonBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex]\n        })\n      };\n      break;\n    case FunctionSelectItem$1:\n      changes = {\n        selectedItem: action.selectedItem\n      };\n      break;\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$2);\n  }\n  return {\n    ...state,\n    ...changes\n  };\n}\n/* eslint-enable complexity */\n\nuseSelect.stateChangeTypes = stateChangeTypes$2;\nfunction useSelect(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes$2(userProps, useSelect);\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps$2,\n    ...userProps\n  };\n  const {\n    items,\n    scrollIntoView,\n    environment,\n    itemToString,\n    getA11ySelectionMessage,\n    getA11yStatusMessage\n  } = props;\n  // Initial state depending on controlled props.\n  const initialState = getInitialState$2(props);\n  const [state, dispatch] = useControlledReducer$1(downshiftSelectReducer, initialState, props);\n  const {\n    isOpen,\n    highlightedIndex,\n    selectedItem,\n    inputValue\n  } = state;\n\n  // Element efs.\n  const toggleButtonRef = useRef(null);\n  const menuRef = useRef(null);\n  const itemRefs = useRef({});\n  // used to keep the inputValue clearTimeout object between renders.\n  const clearTimeoutRef = useRef(null);\n  // prevent id re-generation between renders.\n  const elementIds = useElementIds(props);\n  // used to keep track of how many items we had on previous cycle.\n  const previousResultCountRef = useRef();\n  const isInitialMountRef = useRef(true);\n  // utility callback to get item element.\n  const latest = useLatestRef({\n    state,\n    props\n  });\n\n  // Some utils.\n  const getItemNodeFromIndex = useCallback(index => itemRefs.current[elementIds.getItemId(index)], [elementIds]);\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  });\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  });\n  // Scroll on highlighted item if change comes from keyboard.\n  const shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    scrollIntoView,\n    getItemNodeFromIndex\n  });\n\n  // Sets cleanup for the keysSoFar callback, debounded after 500ms.\n  useEffect(() => {\n    // init the clean function here as we need access to dispatch.\n    clearTimeoutRef.current = debounce(outerDispatch => {\n      outerDispatch({\n        type: FunctionSetInputValue$1,\n        inputValue: ''\n      });\n    }, 500);\n\n    // Cancel any pending debounced calls on mount\n    return () => {\n      clearTimeoutRef.current.cancel();\n    };\n  }, []);\n\n  // Invokes the keysSoFar callback set up above.\n  useEffect(() => {\n    if (!inputValue) {\n      return;\n    }\n    clearTimeoutRef.current(dispatch);\n  }, [dispatch, inputValue]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state\n  });\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    previousResultCountRef.current = items.length;\n  });\n  // Add mouse/touch events to document.\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, () => {\n    dispatch({\n      type: ToggleButtonBlur\n    });\n  });\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getMenuProps', 'getToggleButtonProps');\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false;\n  }, []);\n  // Reset itemRefs on close.\n  useEffect(() => {\n    if (!isOpen) {\n      itemRefs.current = {};\n    }\n  }, [isOpen]);\n\n  // Event handler functions.\n  const toggleButtonKeyDownHandlers = useMemo(() => ({\n    ArrowDown(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownArrowDown,\n        getItemNodeFromIndex,\n        altKey: event.altKey\n      });\n    },\n    ArrowUp(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownArrowUp,\n        getItemNodeFromIndex,\n        altKey: event.altKey\n      });\n    },\n    Home(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownHome,\n        getItemNodeFromIndex\n      });\n    },\n    End(event) {\n      event.preventDefault();\n      dispatch({\n        type: ToggleButtonKeyDownEnd,\n        getItemNodeFromIndex\n      });\n    },\n    Escape() {\n      if (latest.current.state.isOpen) {\n        dispatch({\n          type: ToggleButtonKeyDownEscape\n        });\n      }\n    },\n    Enter(event) {\n      event.preventDefault();\n      dispatch({\n        type: latest.current.state.isOpen ? ToggleButtonKeyDownEnter : ToggleButtonClick$1\n      });\n    },\n    PageUp(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownPageUp,\n          getItemNodeFromIndex\n        });\n      }\n    },\n    PageDown(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: ToggleButtonKeyDownPageDown,\n          getItemNodeFromIndex\n        });\n      }\n    },\n    ' '(event) {\n      event.preventDefault();\n      dispatch({\n        type: latest.current.state.isOpen ? ToggleButtonKeyDownSpaceButton : ToggleButtonClick$1\n      });\n    }\n  }), [dispatch, getItemNodeFromIndex, latest]);\n\n  // Action functions.\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: FunctionToggleMenu$1\n    });\n  }, [dispatch]);\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: FunctionCloseMenu$1\n    });\n  }, [dispatch]);\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: FunctionOpenMenu$1\n    });\n  }, [dispatch]);\n  const setHighlightedIndex = useCallback(newHighlightedIndex => {\n    dispatch({\n      type: FunctionSetHighlightedIndex$1,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  const selectItem = useCallback(newSelectedItem => {\n    dispatch({\n      type: FunctionSelectItem$1,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  const reset = useCallback(() => {\n    dispatch({\n      type: FunctionReset$2\n    });\n  }, [dispatch]);\n  const setInputValue = useCallback(newInputValue => {\n    dispatch({\n      type: FunctionSetInputValue$1,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  // Getter functions.\n  const getLabelProps = useCallback(labelProps => ({\n    id: elementIds.labelId,\n    htmlFor: elementIds.toggleButtonId,\n    ...labelProps\n  }), [elementIds]);\n  const getMenuProps = useCallback(function (_temp, _temp2) {\n    let {\n      onMouseLeave,\n      refKey = 'ref',\n      onKeyDown,\n      onBlur,\n      ref,\n      ...rest\n    } = _temp === void 0 ? {} : _temp;\n    let {\n      suppressRefError = false\n    } = _temp2 === void 0 ? {} : _temp2;\n    const menuHandleMouseLeave = () => {\n      dispatch({\n        type: MenuMouseLeave$1\n      });\n    };\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return {\n      [refKey]: handleRefs(ref, menuNode => {\n        menuRef.current = menuNode;\n      }),\n      id: elementIds.menuId,\n      role: 'listbox',\n      'aria-labelledby': elementIds.labelId,\n      tabIndex: -1,\n      onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n      ...rest\n    };\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  const getToggleButtonProps = useCallback(function (_temp3, _temp4) {\n    let {\n      onBlur,\n      onClick,\n      onKeyDown,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp3 === void 0 ? {} : _temp3;\n    let {\n      suppressRefError = false\n    } = _temp4 === void 0 ? {} : _temp4;\n    const latestState = latest.current.state;\n    const toggleButtonHandleClick = () => {\n      dispatch({\n        type: ToggleButtonClick$1\n      });\n    };\n    const toggleButtonHandleBlur = () => {\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        dispatch({\n          type: ToggleButtonBlur\n        });\n      }\n    };\n    const toggleButtonHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n      if (key && toggleButtonKeyDownHandlers[key]) {\n        toggleButtonKeyDownHandlers[key](event);\n      } else if (isAcceptedCharacterKey(key)) {\n        dispatch({\n          type: ToggleButtonKeyDownCharacter,\n          key,\n          getItemNodeFromIndex\n        });\n      }\n    };\n    const toggleProps = {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode;\n      }),\n      'aria-activedescendant': latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '',\n      'aria-controls': elementIds.menuId,\n      'aria-expanded': latest.current.state.isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-labelledby': `${elementIds.labelId}`,\n      id: elementIds.toggleButtonId,\n      role: 'combobox',\n      tabIndex: 0,\n      onBlur: callAllEventHandlers(onBlur, toggleButtonHandleBlur),\n      ...rest\n    };\n    if (!rest.disabled) {\n      toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);\n      toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);\n    }\n    setGetterPropCallInfo('getToggleButtonProps', suppressRefError, refKey, toggleButtonRef);\n    return toggleProps;\n  }, [latest, elementIds, setGetterPropCallInfo, dispatch, mouseAndTouchTrackersRef, toggleButtonKeyDownHandlers, getItemNodeFromIndex]);\n  const getItemProps = useCallback(function (_temp5) {\n    let {\n      item: itemProp,\n      index: indexProp,\n      onMouseMove,\n      onClick,\n      refKey = 'ref',\n      ref,\n      disabled,\n      ...rest\n    } = _temp5 === void 0 ? {} : _temp5;\n    const {\n      state: latestState,\n      props: latestProps\n    } = latest.current;\n    const item = itemProp ?? items[indexProp];\n    const index = getItemIndex(indexProp, item, latestProps.items);\n    const itemHandleMouseMove = () => {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove$1,\n        index,\n        disabled\n      });\n    };\n    const itemHandleClick = () => {\n      dispatch({\n        type: ItemClick$1,\n        index\n      });\n    };\n    const itemIndex = getItemIndex(index, item, latestProps.items);\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!');\n    }\n    const itemProps = {\n      disabled,\n      role: 'option',\n      'aria-selected': `${item === selectedItem}`,\n      id: elementIds.getItemId(itemIndex),\n      [refKey]: handleRefs(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;\n        }\n      }),\n      ...rest\n    };\n    if (!disabled) {\n      itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);\n    }\n    itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);\n    return itemProps;\n  }, [latest, items, selectedItem, elementIds, shouldScrollRef, dispatch]);\n  return {\n    // prop getters.\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    selectItem,\n    reset,\n    setInputValue,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue\n  };\n}\n\nconst InputKeyDownArrowDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_down__' : 0;\nconst InputKeyDownArrowUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_arrow_up__' : 1;\nconst InputKeyDownEscape = process.env.NODE_ENV !== \"production\" ? '__input_keydown_escape__' : 2;\nconst InputKeyDownHome = process.env.NODE_ENV !== \"production\" ? '__input_keydown_home__' : 3;\nconst InputKeyDownEnd = process.env.NODE_ENV !== \"production\" ? '__input_keydown_end__' : 4;\nconst InputKeyDownPageUp = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_up__' : 5;\nconst InputKeyDownPageDown = process.env.NODE_ENV !== \"production\" ? '__input_keydown_page_down__' : 6;\nconst InputKeyDownEnter = process.env.NODE_ENV !== \"production\" ? '__input_keydown_enter__' : 7;\nconst InputChange = process.env.NODE_ENV !== \"production\" ? '__input_change__' : 8;\nconst InputBlur = process.env.NODE_ENV !== \"production\" ? '__input_blur__' : 9;\nconst InputFocus = process.env.NODE_ENV !== \"production\" ? '__input_focus__' : 10;\nconst MenuMouseLeave = process.env.NODE_ENV !== \"production\" ? '__menu_mouse_leave__' : 11;\nconst ItemMouseMove = process.env.NODE_ENV !== \"production\" ? '__item_mouse_move__' : 12;\nconst ItemClick = process.env.NODE_ENV !== \"production\" ? '__item_click__' : 13;\nconst ToggleButtonClick = process.env.NODE_ENV !== \"production\" ? '__togglebutton_click__' : 14;\nconst FunctionToggleMenu = process.env.NODE_ENV !== \"production\" ? '__function_toggle_menu__' : 15;\nconst FunctionOpenMenu = process.env.NODE_ENV !== \"production\" ? '__function_open_menu__' : 16;\nconst FunctionCloseMenu = process.env.NODE_ENV !== \"production\" ? '__function_close_menu__' : 17;\nconst FunctionSetHighlightedIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_highlighted_index__' : 18;\nconst FunctionSelectItem = process.env.NODE_ENV !== \"production\" ? '__function_select_item__' : 19;\nconst FunctionSetInputValue = process.env.NODE_ENV !== \"production\" ? '__function_set_input_value__' : 20;\nconst FunctionReset$1 = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 21;\nconst ControlledPropUpdatedSelectedItem = process.env.NODE_ENV !== \"production\" ? '__controlled_prop_updated_selected_item__' : 22;\n\nvar stateChangeTypes$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  InputKeyDownArrowDown: InputKeyDownArrowDown,\n  InputKeyDownArrowUp: InputKeyDownArrowUp,\n  InputKeyDownEscape: InputKeyDownEscape,\n  InputKeyDownHome: InputKeyDownHome,\n  InputKeyDownEnd: InputKeyDownEnd,\n  InputKeyDownPageUp: InputKeyDownPageUp,\n  InputKeyDownPageDown: InputKeyDownPageDown,\n  InputKeyDownEnter: InputKeyDownEnter,\n  InputChange: InputChange,\n  InputBlur: InputBlur,\n  InputFocus: InputFocus,\n  MenuMouseLeave: MenuMouseLeave,\n  ItemMouseMove: ItemMouseMove,\n  ItemClick: ItemClick,\n  ToggleButtonClick: ToggleButtonClick,\n  FunctionToggleMenu: FunctionToggleMenu,\n  FunctionOpenMenu: FunctionOpenMenu,\n  FunctionCloseMenu: FunctionCloseMenu,\n  FunctionSetHighlightedIndex: FunctionSetHighlightedIndex,\n  FunctionSelectItem: FunctionSelectItem,\n  FunctionSetInputValue: FunctionSetInputValue,\n  FunctionReset: FunctionReset$1,\n  ControlledPropUpdatedSelectedItem: ControlledPropUpdatedSelectedItem\n});\n\nfunction getInitialState$1(props) {\n  const initialState = getInitialState$2(props);\n  const {\n    selectedItem\n  } = initialState;\n  let {\n    inputValue\n  } = initialState;\n  if (inputValue === '' && selectedItem && props.defaultInputValue === undefined && props.initialInputValue === undefined && props.inputValue === undefined) {\n    inputValue = props.itemToString(selectedItem);\n  }\n  return {\n    ...initialState,\n    inputValue\n  };\n}\nconst propTypes$1 = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\n\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nfunction useControlledReducer(reducer, initialState, props) {\n  const previousSelectedItemRef = useRef();\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props);\n\n  // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n  useEffect(() => {\n    if (isControlledProp(props, 'selectedItem')) {\n      if (previousSelectedItemRef.current !== props.selectedItem) {\n        dispatch({\n          type: ControlledPropUpdatedSelectedItem,\n          inputValue: props.itemToString(props.selectedItem)\n        });\n      }\n      previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;\n    }\n  });\n  return [getState(state, props), dispatch];\n}\n\n// eslint-disable-next-line import/no-mutable-exports\nlet validatePropTypes$1 = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes$1 = (options, caller) => {\n    PropTypes.checkPropTypes(propTypes$1, options, 'prop', caller.name);\n  };\n}\nconst defaultProps$1 = {\n  ...defaultProps$3,\n  getA11yStatusMessage: getA11yStatusMessage$1\n};\n\n/* eslint-disable complexity */\nfunction downshiftUseComboboxReducer(state, action) {\n  const {\n    type,\n    props,\n    altKey\n  } = action;\n  let changes;\n  switch (type) {\n    case ItemClick:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n    case InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)\n        };\n      } else {\n        changes = {\n          highlightedIndex: altKey && state.selectedItem == null ? -1 : getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n      break;\n    case InputKeyDownArrowUp:\n      if (state.isOpen) {\n        if (altKey) {\n          changes = {\n            isOpen: getDefaultValue$1(props, 'isOpen'),\n            highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n            ...(state.highlightedIndex >= 0 && {\n              selectedItem: props.items[state.highlightedIndex],\n              inputValue: props.itemToString(props.items[state.highlightedIndex])\n            })\n          };\n        } else {\n          changes = {\n            highlightedIndex: getNextWrappingIndex(-1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, true)\n          };\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),\n          isOpen: props.items.length >= 0\n        };\n      }\n      break;\n    case InputKeyDownEnter:\n      changes = {\n        isOpen: getDefaultValue$1(props, 'isOpen'),\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          inputValue: props.itemToString(props.items[state.highlightedIndex])\n        })\n      };\n      break;\n    case InputKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(!state.isOpen && {\n          selectedItem: null,\n          inputValue: ''\n        })\n      };\n      break;\n    case InputKeyDownPageUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(-10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputKeyDownPageDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(10, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)\n      };\n      break;\n    case InputBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n        ...(state.highlightedIndex >= 0 && action.selectItem && {\n          selectedItem: props.items[state.highlightedIndex],\n          inputValue: props.itemToString(props.items[state.highlightedIndex])\n        })\n      };\n      break;\n    case InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue$1(props, 'highlightedIndex'),\n        inputValue: action.inputValue\n      };\n      break;\n    case InputFocus:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)\n      };\n      break;\n    case FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n    case ControlledPropUpdatedSelectedItem:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n    default:\n      return downshiftCommonReducer(state, action, stateChangeTypes$1);\n  }\n  return {\n    ...state,\n    ...changes\n  };\n}\n/* eslint-enable complexity */\n\n/* eslint-disable max-statements */\nuseCombobox.stateChangeTypes = stateChangeTypes$1;\nfunction useCombobox(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes$1(userProps, useCombobox);\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps$1,\n    ...userProps\n  };\n  const {\n    initialIsOpen,\n    defaultIsOpen,\n    items,\n    scrollIntoView,\n    environment,\n    getA11yStatusMessage,\n    getA11ySelectionMessage,\n    itemToString\n  } = props;\n  // Initial state depending on controlled props.\n  const initialState = getInitialState$1(props);\n  const [state, dispatch] = useControlledReducer(downshiftUseComboboxReducer, initialState, props);\n  const {\n    isOpen,\n    highlightedIndex,\n    selectedItem,\n    inputValue\n  } = state;\n\n  // Element refs.\n  const menuRef = useRef(null);\n  const itemRefs = useRef({});\n  const inputRef = useRef(null);\n  const toggleButtonRef = useRef(null);\n  const isInitialMountRef = useRef(true);\n  // prevent id re-generation between renders.\n  const elementIds = useElementIds(props);\n  // used to keep track of how many items we had on previous cycle.\n  const previousResultCountRef = useRef();\n  // utility callback to get item element.\n  const latest = useLatestRef({\n    state,\n    props\n  });\n  const getItemNodeFromIndex = useCallback(index => itemRefs.current[elementIds.getItemId(index)], [elementIds]);\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useA11yMessageSetter(getA11yStatusMessage, [isOpen, highlightedIndex, inputValue, items], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  });\n  // Sets a11y status message on changes in selectedItem.\n  useA11yMessageSetter(getA11ySelectionMessage, [selectedItem], {\n    isInitialMount: isInitialMountRef.current,\n    previousResultCount: previousResultCountRef.current,\n    items,\n    environment,\n    itemToString,\n    ...state\n  });\n  // Scroll on highlighted item if change comes from keyboard.\n  const shouldScrollRef = useScrollIntoView({\n    menuElement: menuRef.current,\n    highlightedIndex,\n    isOpen,\n    itemRefs,\n    scrollIntoView,\n    getItemNodeFromIndex\n  });\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state\n  });\n  // Focus the input on first render if required.\n  useEffect(() => {\n    const focusOnOpen = initialIsOpen || defaultIsOpen || isOpen;\n    if (focusOnOpen && inputRef.current) {\n      inputRef.current.focus();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    previousResultCountRef.current = items.length;\n  });\n  // Add mouse/touch events to document.\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [inputRef, menuRef, toggleButtonRef], environment, () => {\n    dispatch({\n      type: InputBlur,\n      selectItem: false\n    });\n  });\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getInputProps', 'getMenuProps');\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false;\n  }, []);\n  // Reset itemRefs on close.\n  useEffect(() => {\n    if (!isOpen) {\n      itemRefs.current = {};\n    } else if (document.activeElement !== inputRef.current) {\n      var _inputRef$current;\n      inputRef == null ? void 0 : (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n    }\n  }, [isOpen]);\n\n  /* Event handler functions */\n  const inputKeyDownHandlers = useMemo(() => ({\n    ArrowDown(event) {\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownArrowDown,\n        altKey: event.altKey,\n        getItemNodeFromIndex\n      });\n    },\n    ArrowUp(event) {\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownArrowUp,\n        altKey: event.altKey,\n        getItemNodeFromIndex\n      });\n    },\n    Home(event) {\n      if (!latest.current.state.isOpen) {\n        return;\n      }\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownHome,\n        getItemNodeFromIndex\n      });\n    },\n    End(event) {\n      if (!latest.current.state.isOpen) {\n        return;\n      }\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownEnd,\n        getItemNodeFromIndex\n      });\n    },\n    Escape(event) {\n      const latestState = latest.current.state;\n      if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownEscape\n        });\n      }\n    },\n    Enter(event) {\n      const latestState = latest.current.state;\n      // if closed or no highlighted index, do nothing.\n      if (!latestState.isOpen || event.which === 229 // if IME composing, wait for next Enter keydown event.\n      ) {\n        return;\n      }\n      event.preventDefault();\n      dispatch({\n        type: InputKeyDownEnter,\n        getItemNodeFromIndex\n      });\n    },\n    PageUp(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownPageUp,\n          getItemNodeFromIndex\n        });\n      }\n    },\n    PageDown(event) {\n      if (latest.current.state.isOpen) {\n        event.preventDefault();\n        dispatch({\n          type: InputKeyDownPageDown,\n          getItemNodeFromIndex\n        });\n      }\n    }\n  }), [dispatch, latest, getItemNodeFromIndex]);\n\n  // Getter props.\n  const getLabelProps = useCallback(labelProps => ({\n    id: elementIds.labelId,\n    htmlFor: elementIds.inputId,\n    ...labelProps\n  }), [elementIds]);\n  const getMenuProps = useCallback(function (_temp, _temp2) {\n    let {\n      onMouseLeave,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp === void 0 ? {} : _temp;\n    let {\n      suppressRefError = false\n    } = _temp2 === void 0 ? {} : _temp2;\n    setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef);\n    return {\n      [refKey]: handleRefs(ref, menuNode => {\n        menuRef.current = menuNode;\n      }),\n      id: elementIds.menuId,\n      role: 'listbox',\n      'aria-labelledby': elementIds.labelId,\n      onMouseLeave: callAllEventHandlers(onMouseLeave, () => {\n        dispatch({\n          type: MenuMouseLeave\n        });\n      }),\n      ...rest\n    };\n  }, [dispatch, setGetterPropCallInfo, elementIds]);\n  const getItemProps = useCallback(function (_temp3) {\n    let {\n      item,\n      index,\n      refKey = 'ref',\n      ref,\n      onMouseMove,\n      onMouseDown,\n      onClick,\n      onPress,\n      disabled,\n      ...rest\n    } = _temp3 === void 0 ? {} : _temp3;\n    const {\n      props: latestProps,\n      state: latestState\n    } = latest.current;\n    const itemIndex = getItemIndex(index, item, latestProps.items);\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!');\n    }\n    const onSelectKey = 'onClick';\n    const customClickHandler = onClick;\n    const itemHandleMouseMove = () => {\n      if (index === latestState.highlightedIndex) {\n        return;\n      }\n      shouldScrollRef.current = false;\n      dispatch({\n        type: ItemMouseMove,\n        index,\n        disabled\n      });\n    };\n    const itemHandleClick = () => {\n      dispatch({\n        type: ItemClick,\n        index\n      });\n    };\n    const itemHandleMouseDown = e => e.preventDefault();\n    return {\n      [refKey]: handleRefs(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;\n        }\n      }),\n      disabled,\n      role: 'option',\n      'aria-selected': `${itemIndex === latestState.highlightedIndex}`,\n      id: elementIds.getItemId(itemIndex),\n      ...(!disabled && {\n        [onSelectKey]: callAllEventHandlers(customClickHandler, itemHandleClick)\n      }),\n      onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),\n      onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown),\n      ...rest\n    };\n  }, [dispatch, latest, shouldScrollRef, elementIds]);\n  const getToggleButtonProps = useCallback(function (_temp4) {\n    let {\n      onClick,\n      onPress,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp4 === void 0 ? {} : _temp4;\n    const latestState = latest.current.state;\n    const toggleButtonHandleClick = () => {\n      dispatch({\n        type: ToggleButtonClick\n      });\n    };\n    return {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode;\n      }),\n      'aria-controls': elementIds.menuId,\n      'aria-expanded': latestState.isOpen,\n      id: elementIds.toggleButtonId,\n      tabIndex: -1,\n      ...(!rest.disabled && {\n        ...({\n          onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)\n        })\n      }),\n      ...rest\n    };\n  }, [dispatch, latest, elementIds]);\n  const getInputProps = useCallback(function (_temp5, _temp6) {\n    let {\n      onKeyDown,\n      onChange,\n      onInput,\n      onFocus,\n      onBlur,\n      onChangeText,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = _temp5 === void 0 ? {} : _temp5;\n    let {\n      suppressRefError = false\n    } = _temp6 === void 0 ? {} : _temp6;\n    setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef);\n    const latestState = latest.current.state;\n    const inputHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n      if (key && inputKeyDownHandlers[key]) {\n        inputKeyDownHandlers[key](event);\n      }\n    };\n    const inputHandleChange = event => {\n      dispatch({\n        type: InputChange,\n        inputValue: event.target.value\n      });\n    };\n    const inputHandleBlur = () => {\n      /* istanbul ignore else */\n      if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {\n        dispatch({\n          type: InputBlur,\n          selectItem: true\n        });\n      }\n    };\n    const inputHandleFocus = () => {\n      if (!latestState.isOpen) {\n        dispatch({\n          type: InputFocus\n        });\n      }\n    };\n\n    /* istanbul ignore next (preact) */\n    const onChangeKey = 'onChange';\n    let eventHandlers = {};\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(onChange, onInput, inputHandleChange),\n        onKeyDown: callAllEventHandlers(onKeyDown, inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, inputHandleBlur),\n        onFocus: callAllEventHandlers(onFocus, inputHandleFocus)\n      };\n    }\n    return {\n      [refKey]: handleRefs(ref, inputNode => {\n        inputRef.current = inputNode;\n      }),\n      'aria-activedescendant': latestState.isOpen && latestState.highlightedIndex > -1 ? elementIds.getItemId(latestState.highlightedIndex) : '',\n      'aria-autocomplete': 'list',\n      'aria-controls': elementIds.menuId,\n      'aria-expanded': latestState.isOpen,\n      'aria-labelledby': elementIds.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      id: elementIds.inputId,\n      role: 'combobox',\n      value: latestState.inputValue,\n      ...eventHandlers,\n      ...rest\n    };\n  }, [dispatch, inputKeyDownHandlers, latest, mouseAndTouchTrackersRef, setGetterPropCallInfo, elementIds]);\n\n  // returns\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: FunctionToggleMenu\n    });\n  }, [dispatch]);\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: FunctionCloseMenu\n    });\n  }, [dispatch]);\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: FunctionOpenMenu\n    });\n  }, [dispatch]);\n  const setHighlightedIndex = useCallback(newHighlightedIndex => {\n    dispatch({\n      type: FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex\n    });\n  }, [dispatch]);\n  const selectItem = useCallback(newSelectedItem => {\n    dispatch({\n      type: FunctionSelectItem,\n      selectedItem: newSelectedItem\n    });\n  }, [dispatch]);\n  const setInputValue = useCallback(newInputValue => {\n    dispatch({\n      type: FunctionSetInputValue,\n      inputValue: newInputValue\n    });\n  }, [dispatch]);\n  const reset = useCallback(() => {\n    dispatch({\n      type: FunctionReset$1\n    });\n  }, [dispatch]);\n  return {\n    // prop getters.\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getToggleButtonProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    setInputValue,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue\n  };\n}\n\nconst defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: []\n};\n\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getInitialValue(props, propKey) {\n  return getInitialValue$1(props, propKey, defaultStateValues);\n}\n\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValue$1(props, propKey, defaultStateValues);\n}\n\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\nfunction getInitialState(props) {\n  const activeIndex = getInitialValue(props, 'activeIndex');\n  const selectedItems = getInitialValue(props, 'selectedItems');\n  return {\n    activeIndex,\n    selectedItems\n  };\n}\n\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\nfunction isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false;\n  }\n  const element = event.target;\n  if (element instanceof HTMLInputElement &&\n  // if element is a text input\n  element.value !== '' && (\n  // and we have text in it\n  // and cursor is either not at the start or is currently highlighting text.\n  element.selectionStart !== 0 || element.selectionEnd !== 0)) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11yRemovalMessage(selectionParameters) {\n  const {\n    removedSelectedItem,\n    itemToString: itemToStringLocal\n  } = selectionParameters;\n  return `${itemToStringLocal(removedSelectedItem)} has been removed.`;\n}\nconst propTypes = {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  itemToString: PropTypes.func,\n  getA11yRemovalMessage: PropTypes.func,\n  stateReducer: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any\n    })\n  })\n};\nconst defaultProps = {\n  itemToString: defaultProps$3.itemToString,\n  stateReducer: defaultProps$3.stateReducer,\n  environment: defaultProps$3.environment,\n  getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft'\n};\n\n// eslint-disable-next-line import/no-mutable-exports\nlet validatePropTypes = noop;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== 'production') {\n  validatePropTypes = (options, caller) => {\n    PropTypes.checkPropTypes(propTypes, options, 'prop', caller.name);\n  };\n}\n\nconst SelectedItemClick = process.env.NODE_ENV !== \"production\" ? '__selected_item_click__' : 0;\nconst SelectedItemKeyDownDelete = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_delete__' : 1;\nconst SelectedItemKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_backspace__' : 2;\nconst SelectedItemKeyDownNavigationNext = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_next__' : 3;\nconst SelectedItemKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__selected_item_keydown_navigation_previous__' : 4;\nconst DropdownKeyDownNavigationPrevious = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_navigation_previous__' : 5;\nconst DropdownKeyDownBackspace = process.env.NODE_ENV !== \"production\" ? '__dropdown_keydown_backspace__' : 6;\nconst DropdownClick = process.env.NODE_ENV !== \"production\" ? '__dropdown_click__' : 7;\nconst FunctionAddSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_add_selected_item__' : 8;\nconst FunctionRemoveSelectedItem = process.env.NODE_ENV !== \"production\" ? '__function_remove_selected_item__' : 9;\nconst FunctionSetSelectedItems = process.env.NODE_ENV !== \"production\" ? '__function_set_selected_items__' : 10;\nconst FunctionSetActiveIndex = process.env.NODE_ENV !== \"production\" ? '__function_set_active_index__' : 11;\nconst FunctionReset = process.env.NODE_ENV !== \"production\" ? '__function_reset__' : 12;\n\nvar stateChangeTypes = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  SelectedItemClick: SelectedItemClick,\n  SelectedItemKeyDownDelete: SelectedItemKeyDownDelete,\n  SelectedItemKeyDownBackspace: SelectedItemKeyDownBackspace,\n  SelectedItemKeyDownNavigationNext: SelectedItemKeyDownNavigationNext,\n  SelectedItemKeyDownNavigationPrevious: SelectedItemKeyDownNavigationPrevious,\n  DropdownKeyDownNavigationPrevious: DropdownKeyDownNavigationPrevious,\n  DropdownKeyDownBackspace: DropdownKeyDownBackspace,\n  DropdownClick: DropdownClick,\n  FunctionAddSelectedItem: FunctionAddSelectedItem,\n  FunctionRemoveSelectedItem: FunctionRemoveSelectedItem,\n  FunctionSetSelectedItems: FunctionSetSelectedItems,\n  FunctionSetActiveIndex: FunctionSetActiveIndex,\n  FunctionReset: FunctionReset\n});\n\n/* eslint-disable complexity */\nfunction downshiftMultipleSelectionReducer(state, action) {\n  const {\n    type,\n    index,\n    props,\n    selectedItem\n  } = action;\n  const {\n    activeIndex,\n    selectedItems\n  } = state;\n  let changes;\n  switch (type) {\n    case SelectedItemClick:\n      changes = {\n        activeIndex: index\n      };\n      break;\n    case SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1\n      };\n      break;\n    case SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1\n      };\n      break;\n    case SelectedItemKeyDownBackspace:\n    case SelectedItemKeyDownDelete:\n      {\n        let newActiveIndex = activeIndex;\n        if (selectedItems.length === 1) {\n          newActiveIndex = -1;\n        } else if (activeIndex === selectedItems.length - 1) {\n          newActiveIndex = selectedItems.length - 2;\n        }\n        changes = {\n          selectedItems: [...selectedItems.slice(0, activeIndex), ...selectedItems.slice(activeIndex + 1)],\n          ...{\n            activeIndex: newActiveIndex\n          }\n        };\n        break;\n      }\n    case DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1\n      };\n      break;\n    case DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1)\n      };\n      break;\n    case FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [...selectedItems, selectedItem]\n      };\n      break;\n    case DropdownClick:\n      changes = {\n        activeIndex: -1\n      };\n      break;\n    case FunctionRemoveSelectedItem:\n      {\n        let newActiveIndex = activeIndex;\n        const selectedItemIndex = selectedItems.indexOf(selectedItem);\n        if (selectedItemIndex >= 0) {\n          if (selectedItems.length === 1) {\n            newActiveIndex = -1;\n          } else if (selectedItemIndex === selectedItems.length - 1) {\n            newActiveIndex = selectedItems.length - 2;\n          }\n          changes = {\n            selectedItems: [...selectedItems.slice(0, selectedItemIndex), ...selectedItems.slice(selectedItemIndex + 1)],\n            activeIndex: newActiveIndex\n          };\n        }\n        break;\n      }\n    case FunctionSetSelectedItems:\n      {\n        const {\n          selectedItems: newSelectedItems\n        } = action;\n        changes = {\n          selectedItems: newSelectedItems\n        };\n        break;\n      }\n    case FunctionSetActiveIndex:\n      {\n        const {\n          activeIndex: newActiveIndex\n        } = action;\n        changes = {\n          activeIndex: newActiveIndex\n        };\n        break;\n      }\n    case FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems')\n      };\n      break;\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n  return {\n    ...state,\n    ...changes\n  };\n}\n\nuseMultipleSelection.stateChangeTypes = stateChangeTypes;\nfunction useMultipleSelection(userProps) {\n  if (userProps === void 0) {\n    userProps = {};\n  }\n  validatePropTypes(userProps, useMultipleSelection);\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps\n  };\n  const {\n    getA11yRemovalMessage,\n    itemToString,\n    environment,\n    keyNavigationNext,\n    keyNavigationPrevious\n  } = props;\n\n  // Reducer init.\n  const [state, dispatch] = useControlledReducer$1(downshiftMultipleSelectionReducer, getInitialState(props), props);\n  const {\n    activeIndex,\n    selectedItems\n  } = state;\n\n  // Refs.\n  const isInitialMountRef = useRef(true);\n  const dropdownRef = useRef(null);\n  const previousSelectedItemsRef = useRef(selectedItems);\n  const selectedItemRefs = useRef();\n  selectedItemRefs.current = [];\n  const latest = useLatestRef({\n    state,\n    props\n  });\n\n  // Effects.\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      const removedSelectedItem = previousSelectedItemsRef.current.find(item => selectedItems.indexOf(item) < 0);\n      setStatus(getA11yRemovalMessage({\n        itemToString,\n        resultCount: selectedItems.length,\n        removedSelectedItem,\n        activeIndex,\n        activeSelectedItem: selectedItems[activeIndex]\n      }), environment.document);\n    }\n    previousSelectedItemsRef.current = selectedItems;\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length]);\n  // Sets focus on active item.\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return;\n    }\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus();\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus();\n    }\n  }, [activeIndex]);\n  useControlPropsValidator({\n    isInitialMount: isInitialMountRef.current,\n    props,\n    state\n  });\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps');\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false;\n  }, []);\n\n  // Event handler functions.\n  const selectedItemKeyDownHandlers = useMemo(() => ({\n    [keyNavigationPrevious]() {\n      dispatch({\n        type: SelectedItemKeyDownNavigationPrevious\n      });\n    },\n    [keyNavigationNext]() {\n      dispatch({\n        type: SelectedItemKeyDownNavigationNext\n      });\n    },\n    Delete() {\n      dispatch({\n        type: SelectedItemKeyDownDelete\n      });\n    },\n    Backspace() {\n      dispatch({\n        type: SelectedItemKeyDownBackspace\n      });\n    }\n  }), [dispatch, keyNavigationNext, keyNavigationPrevious]);\n  const dropdownKeyDownHandlers = useMemo(() => ({\n    [keyNavigationPrevious](event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownNavigationPrevious\n        });\n      }\n    },\n    Backspace(event) {\n      if (isKeyDownOperationPermitted(event)) {\n        dispatch({\n          type: DropdownKeyDownBackspace\n        });\n      }\n    }\n  }), [dispatch, keyNavigationPrevious]);\n\n  // Getter props.\n  const getSelectedItemProps = useCallback(function (_temp) {\n    let {\n      refKey = 'ref',\n      ref,\n      onClick,\n      onKeyDown,\n      selectedItem,\n      index,\n      ...rest\n    } = _temp === void 0 ? {} : _temp;\n    const {\n      state: latestState\n    } = latest.current;\n    const itemIndex = getItemIndex(index, selectedItem, latestState.selectedItems);\n    if (itemIndex < 0) {\n      throw new Error('Pass either selectedItem or index in getSelectedItemProps!');\n    }\n    const selectedItemHandleClick = () => {\n      dispatch({\n        type: SelectedItemClick,\n        index\n      });\n    };\n    const selectedItemHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n      if (key && selectedItemKeyDownHandlers[key]) {\n        selectedItemKeyDownHandlers[key](event);\n      }\n    };\n    return {\n      [refKey]: handleRefs(ref, selectedItemNode => {\n        if (selectedItemNode) {\n          selectedItemRefs.current.push(selectedItemNode);\n        }\n      }),\n      tabIndex: index === latestState.activeIndex ? 0 : -1,\n      onClick: callAllEventHandlers(onClick, selectedItemHandleClick),\n      onKeyDown: callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown),\n      ...rest\n    };\n  }, [dispatch, latest, selectedItemKeyDownHandlers]);\n  const getDropdownProps = useCallback(function (_temp2, _temp3) {\n    let {\n      refKey = 'ref',\n      ref,\n      onKeyDown,\n      onClick,\n      preventKeyAction = false,\n      ...rest\n    } = _temp2 === void 0 ? {} : _temp2;\n    let {\n      suppressRefError = false\n    } = _temp3 === void 0 ? {} : _temp3;\n    setGetterPropCallInfo('getDropdownProps', suppressRefError, refKey, dropdownRef);\n    const dropdownHandleKeyDown = event => {\n      const key = normalizeArrowKey(event);\n      if (key && dropdownKeyDownHandlers[key]) {\n        dropdownKeyDownHandlers[key](event);\n      }\n    };\n    const dropdownHandleClick = () => {\n      dispatch({\n        type: DropdownClick\n      });\n    };\n    return {\n      [refKey]: handleRefs(ref, dropdownNode => {\n        if (dropdownNode) {\n          dropdownRef.current = dropdownNode;\n        }\n      }),\n      ...(!preventKeyAction && {\n        onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n        onClick: callAllEventHandlers(onClick, dropdownHandleClick)\n      }),\n      ...rest\n    };\n  }, [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo]);\n\n  // returns\n  const addSelectedItem = useCallback(selectedItem => {\n    dispatch({\n      type: FunctionAddSelectedItem,\n      selectedItem\n    });\n  }, [dispatch]);\n  const removeSelectedItem = useCallback(selectedItem => {\n    dispatch({\n      type: FunctionRemoveSelectedItem,\n      selectedItem\n    });\n  }, [dispatch]);\n  const setSelectedItems = useCallback(newSelectedItems => {\n    dispatch({\n      type: FunctionSetSelectedItems,\n      selectedItems: newSelectedItems\n    });\n  }, [dispatch]);\n  const setActiveIndex = useCallback(newActiveIndex => {\n    dispatch({\n      type: FunctionSetActiveIndex,\n      activeIndex: newActiveIndex\n    });\n  }, [dispatch]);\n  const reset = useCallback(() => {\n    dispatch({\n      type: FunctionReset\n    });\n  }, [dispatch]);\n  return {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    setSelectedItems,\n    setActiveIndex,\n    reset,\n    selectedItems,\n    activeIndex\n  };\n}\n\nexport { Downshift$1 as default, resetIdCounter, useCombobox, useMultipleSelection, useSelect };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}