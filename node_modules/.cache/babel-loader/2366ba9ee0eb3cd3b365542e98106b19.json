{"ast":null,"code":"var _jsxFileName = \"/Users/richie/Desktop/ramp-fe-challenge 2/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  // const { data: employees, ...employeeUtils } = useEmployees()\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n\n    if (employeeId === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n      return;\n    }\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        // isLoading={isLoading}\n        isLoading: loadingEmployees,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xCa5tR1rxeaLD2jbyYzU9GyuJhI=\", false, function () {\n  return [usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","transactions","loadAllTransactions","invalidateData","employeeUtils","fetchAll","loadTransactionsByEmployee","employeeId","id","fetchById","employees","loading","loadingEmployees","item","value","label","firstName","lastName","newValue"],"sources":["/Users/richie/Desktop/ramp-fe-challenge 2/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  // const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n\n      if (employeeId === EMPTY_EMPLOYEE.id) {\n        await loadAllTransactions();\n        return;\n      }\n      \n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          // isLoading={isLoading}\n          isLoading={loadingEmployees}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}